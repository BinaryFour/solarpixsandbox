{"version":3,"sources":["apis/files.js","schemas/schemas.js","database/db.js","HOCs/NetworkDetector.js","apis/uploadImage.js","actions/index.js","actions/types.js","components/InputForm.js","components/pages/CreateJob.js","components/Footer.js","components/pages/CategoryList.js","components/CameraComp.js","components/Modal.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/pages/UploadAll.js","components/pages/JobList.js","components/pages/SignIn.js","components/App.js","reducers/currentJobReducer.js","reducers/index.js","reducers/uploadStatusReducer.js","reducers/userReducer.js","reducers/categoriesReducer.js","reducers/jobReducer.js","reducers/pageLocationReducer.js","serviceWorker.js","index.js","localStorage.js","categoryListFile_install","categoryListFile_pcsv","categoryListFile_salessv"],"names":["axios","create","baseURL","pictureReq","schema","Entity","job","pictureReqs","db","Dexie","version","stores","job1","job2","job3","job4","job5","job6","job7","job8","job9","job0","ComposedComponent","uploadImage","image","config","auth","username","password","crossDomain","formData","FormData","append","get","size","lastModified","console","log","Promise","reject","Error","files","post","setJobCounter","increment","type","payload","setCurrentJob","jobId","setUsername","userName","updateCatUploadStatus","categoryId","status","photoReq","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","_this2","this","fields","map","field","Field","name","key","component","dropdown","validate","handleSubmit","renderList","React","Component","reduxForm","form","userValidation","undefined","CreateJob","state","toCategories","toDelete","toSignin","getOpenJobId","currentJobs","jobs","keys","length","i","_","findKey","id","_callee","projName","jobIdNum","regenerator_default","wrap","_context","prev","next","projectName","toUpperCase","localStorage","getItem","includes","createJobList","profileName","Number","isInteger","addNewJob","setState","currentJob","stop","Redirect","to","components_InputForm","initialValues","connect","jobMeta","counter","jobCounter","pickBy","sessions","entities","e","asyncToGenerator","mark","_callee3","dispatch","colormap","categoryArray","superCatArray","response","uniqueSuperCats","colorCount","colors","pictureReqId","_context4","require","t0","categoryListFile_install","sent","abrupt","categoryListFile_pcsv","categoryListFile_salessv","data","split","forEach","category","tempArray","obj","title","description","photoQty","catUploadStatus","push","toConsumableArray","Set","nshades","format","alpha","cellColor","parseInt","jobData","color","pictureReqData","categories","_x4","apply","arguments","_callee2","normalJobData","_context3","normalize","_x3","Footer","width","links","link","Link","path","style","classname","CategoryList","pageLocation","window","scrollTo","saveLocation","pageYOffset","backgroundColor","textAlign","success","fail","neutral","waiting","es_Redirect","display","height","components_Footer","ownProps","currentJobId","currentPictureReqs","userData","values","yValue","readTextFile","textFile","_ref4","_callee4","_context5","_x5","location","styles","CameraComp","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","stopPropagation","content","alt","src","marginBottom","actions","document","querySelector","CategoryEdit","_isMounted","testVar","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","showPermissionsMsg","os","osVersion","componentDidMount","isOpen","open","getThumbnails","srcToFile","res","_context2","fetch","arrayBuffer","countLocalPhotos","localCatPhotosCount","table","where","equals","and","result","photoId","count","onClickThumbnail","URL","createObjectURL","photo","uploadFile","_callee5","toastSettings","updateStatusTrue","onAddPhoto","_callee6","imgData","fileData","cameraChoice","timeStamp","renamedFile","_context6","Math","floor","Date","now","process","osName","File","saveToDb","t1","img","add","fileName","uploadStatus","update","_callee7","_context7","startsWith","toArray","updatePhotoQty","message","toastManager","appearance","autoDismiss","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","components_CameraComp","build_default","onTakePhoto","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","isImageMirror","imageCompression","isMaxResolution","onCameraError","withToastManager","getCategory","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","currentPictureReq","clear","deleteJob","currentJobCounter","UploadAll","getLocalPhotos","localPhotos","uploadFiles","successArray","failArray","photoCategory","_tempArray","uniqueSuccessCategories","uniqueFailCategories","checkCategoryUploadStatus","categoriesArray","_loop","delegateYield","JobList","checkForPhotoCompletion","uploadedPhotosCount","jobPhotosCount","updateJobColor","onJobClick","onDeleteClick","sessionData","visibility","compact","SignIn","toJobList","toSignIn","networkDetector","dist","HashRouter","Route","exact","_Component","NetworkDetector","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","isDisconnected","handleConnectionChange","webPing","navigator","onLine","setInterval","mode","then","clearInterval","catch","inherits","createClass","addEventListener","removeEventListener","uploadAllPhotos","photoArray","uniqueSuccess","uniqueObjs","tables","j","photoData","k","x","JSON","stringify","parse","successUpload","_x","_x2","updateUploadStatus","initialState","appReducer","combineReducers","action","objectSpread","newCount","categoryData","mapKeys","defineProperty","newState","formReducer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","persistedState","localState","err","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","setItem","setLocalStorage","render","es","components_App","href","origin","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a2de9348.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL: 'https://binaryfour.github.io/'\r\n})\r\n","import { schema } from 'normalizr';\r\n//Root category defined at bottom, after deepest object defined first.\r\n\r\n//Define a categories schema\r\nconst pictureReq = new schema.Entity('pictureReqs');\r\n\r\n//Define a job schema\r\nconst job = new schema.Entity('jobs', {\r\n  pictureReqs: pictureReq\r\n});\r\n\r\n//Define a job array\r\n\r\nexport { job };\r\n//const normalizedData = normalize(localStorage.state, job);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\n\r\ndb.version(3).stores({\r\n    job1: `photoId, uploadStatus`,\r\n    job2: `photoId, uploadStatus`,\r\n    job3: `photoId, uploadStatus`,\r\n    job4: `photoId, uploadStatus`,\r\n    job5: `photoId, uploadStatus`,\r\n    job6: `photoId, uploadStatus`,\r\n    job7: `photoId, uploadStatus`,\r\n    job8: `photoId, uploadStatus`,\r\n    job9: `photoId, uploadStatus`,\r\n    job0: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","/*\r\nhttps://www.codementor.io/nedson/a-guide-to-handling-internet-disconnection-in-react-applications-rs7u9zpwn\r\nThis component Code from this site\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\n//let isDisconnectedVar = false;\r\n\r\nexport default function (ComposedComponent) {\r\n  class NetworkDetector extends Component {\r\n    state = {\r\n      isDisconnected: false\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.handleConnectionChange();\r\n      window.addEventListener('online', this.handleConnectionChange);\r\n      window.addEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener('online', this.handleConnectionChange);\r\n      window.removeEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n\r\n    handleConnectionChange = async () => {\r\n      const condition = navigator.onLine ? 'online' : 'offline';\r\n      if (condition === 'online') {\r\n        const webPing = setInterval(\r\n          () => {\r\n            fetch('//google.com', {\r\n              mode: 'no-cors',\r\n              })\r\n            .then(() => {\r\n              this.setState({ isDisconnected: false }\r\n                , () => {\r\n                return clearInterval(webPing)\r\n              });\r\n            }).catch(() => this.setState({ isDisconnected: true }) )\r\n          }, 2000);\r\n        return;\r\n      }\r\n\r\n      return this.setState({ isDisconnected: true });\r\n    }\r\n\r\n    render() {\r\n      //return <ComposedComponent {...this.props}  isDisconnected={this.state.isDisconnected} />;\r\n\r\n      const { isDisconnected } = this.state;\r\n      return (\r\n        <div>\r\n          { isDisconnected && (<div className='ui block center aligned header' style={{ backgroundColor: 'orange' }}>\r\n              <p>Offline Mode</p>\r\n            </div>)\r\n          }\r\n          <ComposedComponent {...this.props} isDisconnected={this.state.isDisconnected}/>\r\n        </div>\r\n      );\r\n\r\n    }\r\n  }\r\n\r\n  return NetworkDetector;\r\n}\r\n","import files from '../apis/files';\r\n\r\n//import axiosRetry from 'axios-retry';\r\n\r\nconst uploadImage = (image) => {\r\n\r\n  //axios retry for exponential back-off\r\n  //axiosRetry(files, { retryDelay: axiosRetry.exponentialDelay });\r\n\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  //returns a promise\r\n  //console.log(image);\r\n\r\n  if(formData.get('upload').size === 0 || image.lastModified === 0){\r\n    console.log('This is formData: ', formData.get('upload'));\r\n    return new Promise.reject(new Error('Image Corrupted'));\r\n  }\r\n\r\n\r\n  return files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n  //return Promise.reject();\r\n  //return axiosRetry(files)\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","import files from '../apis/files';\r\nimport categoryListFile_install from '../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../categoryListFile_pcsv';\r\nimport categoryListFile_salessv from '../categoryListFile_salessv';\r\nimport { normalize } from 'normalizr';\r\nimport { job } from '../schemas/schemas';\r\nimport db from '../database/db';\r\nimport uploadImage from '../apis/uploadImage';\r\n\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  ADD_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPDATE_PHOTOQTY,\r\n  DELETE_JOB,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  SAVE_PAGELOCATION,\r\n  SET_USERNAME,\r\n  CREATE_JOBLIST,\r\n  SET_CURRENTJOB,\r\n  SET_JOBCOUNTER,\r\n  UPLOAD_ALLIMAGES,\r\n  UPLOAD_ALLIMAGES_STATUS,\r\n  UPDATE_JOBCOLOR\r\n} from './types';\r\n\r\n\r\nexport const updateJobColor = (job, color) => {\r\n\r\n  return {\r\n    type: UPDATE_JOBCOLOR,\r\n    payload: {\r\n      color: color,\r\n      jobId: job\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUploadStatus = (status) => {\r\n\r\n  return {\r\n    type: UPLOAD_ALLIMAGES_STATUS,\r\n    payload: status\r\n  }\r\n}\r\n\r\n/*\r\nGet all photos that are not uploaded,\r\nfor loop upload them all.  On success, update the db entry and the category uploadStatus for the photo\r\n\r\n*/\r\nexport const uploadAllPhotos = () => async (dispatch, getState) => {\r\n\r\n  console.log('entered uploadAllPhotos');\r\n  if(!db.isOpen()){\r\n    db.open();\r\n  }\r\n  let photoArray = [];\r\n  let successArray = [];\r\n  let failArray = [];\r\n  let uniqueSuccess = [];\r\n  let uniqueObjs = [];\r\n  //See if there are photos w/ \"notUploaded\" status\r\n  //const photosToUpload = await db.table().where('uploadStatus').equals('notUploaded').toArray();\r\n  const tables = db.tables;\r\n  for(let i=0; i<tables.length; i++){\r\n    const tempArray = await db.table(tables[i].name).where('uploadStatus').equals('notUploaded').toArray();\r\n    photoArray = photoArray.concat(tempArray);\r\n  }\r\n  //console.log('This is photoArray: ', photoArray, photoArray.length);\r\n  //photoArray now has all photos\r\n  if(photoArray.length !== 0){\r\n    //begin automatic upload\r\n    for(let j=0; j<photoArray.length; j++){\r\n      const photoData = photoArray[j];\r\n      try{\r\n        //Upload photo, update db status\r\n        dispatch(updateCatUploadStatus(photoData.photoId[0], 'waiting', photoData.pictureReq));\r\n        await uploadImage(photoData.photo);\r\n        await db.table(photoData.job).update(photoData.photoId, { uploadStatus: 'uploaded' });\r\n        successArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        //updateCatUploadStatus(categoryId, 'success', photoData.pictureReq);\r\n\r\n      }\r\n      catch (e){\r\n        failArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        console.log(e);\r\n      }\r\n    }\r\n    console.log('successArray', successArray, 'failArray', failArray);\r\n    //After for loop finishes, Get all unique uploads and update all category upload icons (code from CategoryEdit)\r\n    try{\r\n      uniqueSuccess = [...new Set(successArray.map(x => JSON.stringify(x)))];\r\n      uniqueObjs = [...new Set(uniqueSuccess.map(x => JSON.parse(x)))];\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n\r\n    console.log('uniqueObjs', uniqueObjs);\r\n    for(let k=0; k<uniqueObjs.length; k++){\r\n      const successUpload = uniqueObjs[k];\r\n      let status = 'neutral';\r\n\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(successUpload.job)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${successUpload.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        dispatch(updateCatUploadStatus(successUpload.categoryId, status, successUpload.pictureReq));\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n      }\r\n    }\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n  else{\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n\r\n\r\n\r\n  dispatch({ type: UPLOAD_ALLIMAGES, payload:  0 });\r\n\r\n}\r\n\r\nexport const setJobCounter = (increment) => {\r\n\r\n  return{\r\n    type: SET_JOBCOUNTER,\r\n    payload: increment\r\n  }\r\n}\r\n\r\nexport const setCurrentJob = (jobId) => {\r\n\r\n  return{\r\n    type: SET_CURRENTJOB,\r\n    payload: jobId\r\n  }\r\n}\r\n\r\nexport const setUsername = (userName) => {\r\n  return{\r\n    type: SET_USERNAME,\r\n    payload: userName\r\n  }\r\n}\r\n\r\n//Saves window page y so that users return to the same location on categoryList page\r\nexport const saveLocation = (location) => {\r\n\r\n  return{\r\n    type: SAVE_PAGELOCATION,\r\n    payload: location\r\n  }\r\n}\r\n\r\n//Sets category property 'uploadStatus'.  Used to show unique icon\r\nexport const updateCatUploadStatus = (categoryId, status, photoReq) => {\r\n\r\n  return{\r\n    type: UPDATE_CATUPLOADSTATUS,\r\n    payload: {\r\n      status: status,\r\n      categoryId: categoryId,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//Delete job, pictureReqs for jobId (db table deleted in DeleteJob component)\r\nexport const deleteJob = (jobId, pictureReq) => {\r\n  //window.localStorage.clear();\r\n  //\r\n\r\n  return{\r\n    type: DELETE_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReq: pictureReq\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n*/\r\n\r\nexport const updatePhotoQty = (categoryId, photoQty, photoReq) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      categoryId: categoryId,\r\n      photoQty: photoQty,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n1.  Create object array using text file based on profileName\r\n2.  For every superCategory, add a unique color to all categories\r\n3.  Create normalized object to put into store (job -> photoReqs)\r\n*/\r\n\r\n//TODO:  Perform steps 1 & 2 once for all unique profileNames, then store the data in the store(?) for future use\r\nexport const createJobList = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  //Color spectrum minimum is 11 colors (Package)\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: {\r\n        id: pictureReqId, jobId: jobId, categories: categoryArray\r\n      },\r\n    color: ''\r\n  }\r\n\r\n  const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: CREATE_JOBLIST,\r\n    payload: normalJobData\r\n  })\r\n/*\r\n\r\n  return{\r\n    type: CREATE_JOBLIST,\r\n    payload:\r\n      { [initialJobId]:\r\n        {\r\n          id: initialJobId,\r\n          projectName: projectName,\r\n          profileName: profileName\r\n        }\r\n      }\r\n  }\r\n*/\r\n}\r\n\r\n//Submit button saves NewJob data\r\nexport const addNewJob = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: pictureReqId,\r\n    color: ''\r\n  }\r\n\r\n  const pictureReqData = {\r\n    id: pictureReqId,\r\n    jobId: jobId,\r\n    categories: categoryArray\r\n  }\r\n\r\n  //const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: ADD_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReqId: pictureReqId,\r\n      jobData: jobData,\r\n      pictureReqData: pictureReqData\r\n    }\r\n  })\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\n\r\n\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    let colormap = require('colormap');\r\n\r\n    var categoryArray = [];\r\n    var superCatArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n        categoryArray.push(obj);\r\n        superCatArray.push(obj.title[0]);\r\n        counter += 1;\r\n      }\r\n    });\r\n\r\n    //Assigning unique colors for each supercategory\r\n    const uniqueSuperCats = [...new Set(superCatArray)];\r\n    let colorCount = 11\r\n    if(uniqueSuperCats.length > 11){\r\n      colorCount = uniqueSuperCats.length;\r\n    }\r\n    let colors = colormap({\r\n      colormap: 'hsv',\r\n      nshades: colorCount,\r\n      format: 'rgba',\r\n      alpha: 0.2\r\n    })\r\n    //console.log(colors)\r\n\r\n    categoryArray.forEach( category => {\r\n      category.cellColor = colors[parseInt(category.title[0])];\r\n    });\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  //console.log(getState());\r\n  const currentJobId = getState().currentJob;\r\n  const currentPictureReqs = getState().sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  const category = getState().sessions.entities.pictureReqs[currentPictureReqs].categories[id];\r\n  //const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const ADD_JOB = 'ADD_JOB';\r\nexport const CREATE_JOBLIST = 'CREATE_JOBLIST';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\nexport const UPDATE_CATUPLOADSTATUS = 'UPDATE_CATUPLOADSTATUS';\r\nexport const SAVE_PAGELOCATION = 'SAVE_PAGELOCATION';\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\nexport const SET_CURRENTJOB = 'SET_CURRENTJOB';\r\nexport const SET_JOBCOUNTER = 'SET_JOBCOUNTER';\r\nexport const REFRESH_STORE = 'REFRESH_STORE';\r\nexport const UPLOAD_ALLIMAGES = 'UPLOAD_ALLIMAGES';\r\nexport const UPLOAD_ALLIMAGES_STATUS = 'UPLOAD_ALLIMAGES_STATUS';\r\nexport const UPDATE_JOBCOLOR = 'UPDATE_JOBCOLOR';\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"install\">Install</option>\r\n          <option value=\"pcsv\">PCSV</option>\r\n          <option value=\"salessv\">Sales SV</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    //console.log('Input form onSubmit: ',formValues);\r\n    this.props.onSubmit(formValues);\r\n\r\n  }\r\n\r\n\r\n\r\n  //render dynamic field list\r\n  renderList(){\r\n    return this.props.fields.map( field => {\r\n      return(\r\n        <Field name={field.name} label={field.label} key={field.key} component=\r\n        {{\r\n          input: this.renderInput,\r\n          dropdown: this.renderDropdown\r\n        }[field.component]}\r\n        validate={field.validate}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    //console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <br/>\r\n        <button className=\"fluid ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  /*\r\n  render(){\r\n    console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  */\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\n\r\n/*\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  //console.log(formValues.profileName);\r\n\r\n  if (!formValues.userName || formValues.userName.length > 3){\r\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n*/\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm'\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { addNewJob, createJobList, setCurrentJob, setJobCounter } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\n//import database from '../../database/db';\r\n\r\nconst userValidation = value => (!value ? 'You must enter a Project Name' : undefined)\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n  }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('entered redirect');\r\n      this.setState({ toSignin: true });\r\n    }\r\n    //console.log(this.props.jobs);\r\n    /*\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n    */\r\n  }\r\n\r\n  /*\r\n  createNewDb = async (jobId) => {\r\n    try{\r\n      if(!db.isOpen()){\r\n        await db.open();\r\n      }\r\n      db.close();\r\n      console.log('dbVerNo: ',db.verno, ' dbVerNo+1: ',db.verno+1);\r\n      await db.version(db.verno+1).stores({\r\n          [jobId]: `photoId, uploadStatus`\r\n      });\r\n      db.open();\r\n\r\n    }\r\n    catch(e){\r\n      console.log('db creation failed', e);\r\n    }\r\n  }\r\n  */\r\n\r\n  /*\r\n  createDb = (jobId) => {\r\n    const dataBase = new Dexie('empowerDb');\r\n\r\n    this.props.createDatabase(dataBase);\r\n\r\n    const db = this.props.db;\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n\r\n  createDbTable = (jobId) => {\r\n    const db = this.props.db;\r\n    if(db.isOpen()){\r\n      db.close();\r\n    }\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n  */\r\n  getOpenJobId = () => {\r\n    const currentJobs = this.props.jobs;\r\n    if(Object.keys(this.props.jobs).length >= 10){\r\n      return null;\r\n    }\r\n    else{\r\n      //Find an available jobId slot (starting from 0, asc);\r\n      for(var i=0; i<10; i++){\r\n        if(!_.findKey(currentJobs, { id: `job${i}` })){\r\n            //console.log(`should be the first non-existing jobId`);\r\n            return i;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list (Set userName to capitals)\r\n  onSubmit = async (formValues) => {\r\n    const projName = formValues.projectName.toUpperCase();\r\n    //If there are no current jobs, create jobList w/ normalized data\r\n    if(localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\r\n      await this.props.createJobList(projName, formValues.profileName, 0);\r\n      await this.props.setCurrentJob(`job0`);\r\n    }\r\n    //Otherwise, create a new job and merge data w/ store\r\n    else{\r\n      const jobIdNum = this.getOpenJobId();\r\n      //console.log(jobIdNum);\r\n      if(Number.isInteger(jobIdNum)){\r\n        await this.props.addNewJob(projName, formValues.profileName, jobIdNum);\r\n        await this.props.setCurrentJob(`job${jobIdNum}`);\r\n      }\r\n      else{\r\n        //prevent user from creating another job\r\n        console.log('There are already 10 jobs');\r\n      }\r\n    }\r\n    //this.props.setJobCounter(1);\r\n    //this.createNewDb(this.props.currentJob);\r\n\r\n\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true, jobId: this.props.currentJob });\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to='/delete' />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>New Job</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install' }}\r\n        fields={\r\n          [\r\n            {\r\n            name: 'projectName',\r\n            label: 'Project Name (try to use one word, all use same)',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            },\r\n            {\r\n            name: 'profileName',\r\n            label: 'Profile',\r\n            component: 'dropdown',\r\n            key: 'field2'\r\n            }\r\n          ]\r\n        }\r\n        //TODO: pass down field information\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n      jobs: _.pickBy(state.sessions.entities.jobs, undefined),\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log('jobs dont exist yet');\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { addNewJob, createJobList, setCurrentJob, setJobCounter })(CreateJob);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    //determine width of each button based on number of buttons\r\n    const width = `${100/this.props.links.length}%`;\r\n\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id} style={{ width: width }}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return(\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\n//import categoryListFile_install from '../../categoryListFile_install';\r\n//import categoryListFile_pcsv from '../../categoryListFile_pcsv';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { readTextFile, saveLocation } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n//import offline from 'offline-js';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/joblist', id: 'jobList', label: 'Back' },\r\n  { path: '/upload', id: 'uploadAll', label: 'Upload All' }\r\n]\r\n\r\n//Used for deciding which icon to show for category Upload status\r\n//const catUploadStatuses =\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  state = {\r\n    toSignin: false\r\n  }\r\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\r\n  //Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      this.setState({toSignin: true});\r\n    }\r\n    //console.log(this.props.sessions);\r\n    //If there is a saved page location, send user back to that position\r\n    if(this.props.pageLocation){\r\n      window.scrollTo(0, this.props.pageLocation);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    //save page position\r\n    //console.log('Y offset ', window.pageYOffset);\r\n    this.props.saveLocation(window.pageYOffset);\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  //change icons based on catUploadStatus\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <Link to={`categories/${category.id}`} className=\"item\" key={category.id} style={{ backgroundColor:\r\n          `rgba(${category.cellColor[0]},${category.cellColor[1]},${category.cellColor[2]},${category.cellColor[3]})` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <div className=\"description\">\r\n                Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          {{\r\n            success: <i className='large middle aligned inverted green check icon'></i>,\r\n            fail: <i className='large middle aligned inverted red x icon'></i>,\r\n            neutral: <i className='large middle aligned inverted gray minus icon'></i>,\r\n            waiting: <i className='large middle aligned cog loading icon'></i>\r\n          }[category.catUploadStatus]}\r\n          <div className=\"content\" >\r\n            <div className=\"header\">{category.title}</div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    if(this.state.toSignin){\r\n      return(\r\n        <Redirect to='/' />\r\n      );\r\n    }\r\n\r\n    return(\r\n        <div>\r\n          <h2>Category List: {this.props.job.projectName}</h2>\r\n          <div className=\"ui celled list\" >{this.renderList()}</div>\r\n          <div className=\"padding\" style={{ display: 'block', height: '48px' }}></div>\r\n          <Footer links={links}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    userName: state.userData,\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    categories: Object.values(state.sessions.entities.pictureReqs[currentPictureReqs].categories),\r\n    pageLocation: state.pageLocation.yValue,\r\n\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile, saveLocation })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass CameraComp extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui fluid labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui fluid button large primary\" htmlFor=\"file\">Use Camera App</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CameraComp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\nimport { osVersion, osName } from 'react-device-detect';\r\n\r\nimport db from '../../database/db';\r\nimport CameraComp from '../CameraComp';\r\nimport Footer from '../Footer';\r\nimport Modal from '../Modal';\r\n\r\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\n//import detectConnection from '../detectConnection';\r\n\r\n//USED to be used for footer lol\r\n/*\r\nconst links = [\r\n  { path: `/categories`, id:'categoryList', label: 'Back' }\r\n];\r\n*/\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none',\r\n    showPermissionsMsg: false,\r\n    os: osVersion\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount = async () =>{\r\n    //Set _isMounted var to true for potential unmount\r\n    this._isMounted = true;\r\n\r\n    //If the database isn't open, open it and get thumbnails\r\n    if(!db.isOpen()){\r\n      await db.open();\r\n    }\r\n    this.getThumbnails();\r\n\r\n    //If Camera permission is denied, tell user to enable camera permissions\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  //Update state w/ uploadStatus: unsent:fail, sentAll:success, default:neutral\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.countLocalPhotos();\r\n  }\r\n\r\n/*\r\nCamera Methods\r\n*/\r\n  onCameraError(error) {\r\n    console.log('This is the camera Error: ',error);\r\n    this.setState({ showPermissionsMsg: true });\r\n  }\r\n\r\n//https://stackoverflow.com/questions/6850276/how-to-convert-dataurl-to-file-object-in-javascript\r\n  //load src and convert to a File instance object\r\n  //work for any type of src, not only image src.\r\n  //return a promise that resolves with a File instance\r\n\r\n  srcToFile = async (src) => {\r\n    console.log('entered srcToFile');\r\n    try{\r\n      const res = await fetch(src);\r\n      //console.log('this is res: ', res);\r\n      return res.arrayBuffer();\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n/*\r\nEdit Methods\r\n*/\r\n\r\n  //Counts the amount of not-Uploaded photos in this category.  Sets store value\r\n  countLocalPhotos = async () => {\r\n    //console.log('Entered countLocalPhotos');\r\n    const photoQty = this.props.category.photoQty;\r\n\r\n    //If there are no photos, do nothing\r\n    if (photoQty !== 0){\r\n      let status = 'neutral';\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${this.state.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        this.props.updateCatUploadStatus(this.state.categoryId, status, this.props.job.pictureReqs);\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n\r\n      }\r\n    }\r\n    //console.log('localCatPhotosCount', localCatPhotosCount);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({ showModal: '', image: image.photo, showImage: showImage, imageId: image.photoId,  });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image/state.imageId\r\n  uploadFile = async () => {\r\n    const imageId = this.state.imageId;\r\n    const image = this.state.image;\r\n    await this.setState({\r\n              showModal: 'none',\r\n              image: {},\r\n              showImage: '',\r\n              imageId: ''\r\n            })\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    try{\r\n      await uploadImage(image);\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('FAIL: Image upload fail.  You can click on the thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name\r\n  //Embedded Camera\r\n  onAddPhoto = async (imgData) => {\r\n    //Check if imgData is string or object\r\n    //console.log('this is typeof: ',typeof imgData);\r\n    let fileData = imgData;\r\n    let cameraChoice = 'N';\r\n\r\n    //If using embedded Camera\r\n    if(typeof imgData == \"string\"){\r\n      fileData = await this.srcToFile(imgData);\r\n      cameraChoice = 'E';\r\n    }\r\n\r\n    //console.log('this is arrBuffer: ', arrBuffer);\r\n    const job = this.props.job;\r\n    const userName = this.props.userName;\r\n    const timeStamp = Math.floor(Date.now() / 1000);\r\n\r\n    const imageQty = this.state.imageQty + 1;\r\n    //TODO: Add several things to title: iOS vers, App vers, which camera was used\r\n    //aV: App Version, os: iOS version, cA: Camera used (E: Embedded, N: Native)\r\n    const imageTitle = `${job.projectName}-${job.profileName}_${this.props.category.title}-${imageQty}_${userName}{av${process.env.REACT_APP_VERSION}-${osName}_${this.state.os}-ca${cameraChoice}}`;\r\n    const imageId = `${this.state.categoryId}_${timeStamp}`;\r\n    //Set current imageId to lastmodified date and rename file\r\n    const renamedFile = new File([fileData], imageTitle+'.jpeg', {type: 'image/jpeg'} );\r\n\r\n    console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n    await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n    //Save file to db, upload photo to server, refresh current page w/ thumbnails\r\n    try{\r\n      await this.saveToDb(renamedFile);\r\n    }catch(error){\r\n      //If saveToDb fails, notify user w/ error code.\r\n      this.toastSettings(`FAIL: Image NOT Saved.  Please re-take the photo. ${error}`, 'error');\r\n    }\r\n\r\n    this.getThumbnails();\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n\r\n    try{\r\n      //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n      /*TODO: If uploads are being corrupted, wouldn't that mean that uploadImage here\r\n        is the root cause?  Uploading renamedFile coming in as 0kb file.\r\n      */\r\n      const response = await uploadImage(renamedFile);\r\n      console.log('This is response', response);\r\n      this.toastSettings('SUCCESS: Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n      //This causes issues if component unmounts.  Illegal setState\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings(`FAIL: Image NOT uploaded.  Please check your internet connection and try again. ${e}`,'error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n  //Saves image to db\r\n  saveToDb = (img) => {\r\n      return db.table(this.props.currentJob).add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: 'notUploaded', photo: img, job:this.props.currentJob, pictureReq: this.props.job.pictureReqs });\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = (imageId) => {\r\n      return db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    console.log('Enter getThumbnails');\r\n    let thumbnails = [];\r\n    let photoQty = 0;\r\n    const categoryId = this.state.categoryId;\r\n    try{\r\n      thumbnails = await db.table(this.props.currentJob).where('photoId').startsWith(`${categoryId}_`).toArray();\r\n      photoQty = thumbnails.length;\r\n      //console.log('no error');\r\n    }\r\n    catch (e){\r\n      console.log('No Photos', e);\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    //console.log(thumbnails);\r\n    this.props.updatePhotoQty(categoryId, photoQty, this.props.job.pictureReqs);\r\n    this.setState({ imageQty: photoQty, thumbnails: thumbnails });\r\n    //console.log('end of getThumbnails');\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus === 'uploaded' ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          content={'Content'}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <h4 style={this.state.showPermissionsMsg ? {} : {display: 'none'}}>You must allow access to the Camera.  If you denied the permission, please go to your chrome settings and enable the Camera permission for this site</h4>\r\n        <div>\r\n          <CameraComp onSubmit = {this.onAddPhoto} />\r\n          <Camera\r\n            onTakePhoto = { (imgData) => { this.onAddPhoto(imgData); } }\r\n            idealFacingMode = {FACING_MODES.ENVIRONMENT}\r\n            imageType = {IMAGE_TYPES.JPG}\r\n            isImageMirror = {false}\r\n            imageCompression  = {0.0}\r\n            isMaxResolution = {true}\r\n            onCameraError = { (error) => { this.onCameraError(error); } }\r\n          />\r\n          <h3>Photos: {this.state.imageQty}</h3>\r\n          <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n        <Footer links={[\r\n          { path: `/${this.props.currentJob}/categories`, id:'categoryList', label: 'Back' }\r\n        ]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n  //console.log(state.sessions.entities.pictureReqs[currentPictureReqs].categories);\r\n  //console.log(ownProps.match.params.id);\r\n\r\n  return{\r\n    category: state.sessions.entities.pictureReqs[currentPictureReqs].categories[ownProps.match.params.id],\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    userName: state.userData,\r\n    currentJob: currentJobId\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { deleteJob, setJobCounter, setCurrentJob } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    const jobId = this.props.currentJobId;\r\n    const pictureReq = this.props.currentPictureReq;\r\n    //console.log(jobId, pictureReq);\r\n    try{\r\n      db.table(jobId).clear();\r\n      this.props.setCurrentJob('');\r\n      await this.props.deleteJob(jobId, pictureReq);\r\n    }\r\n    catch (e){\r\n      console.log('Table did not clear',e);\r\n    }\r\n\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={async () => await this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    /*\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    */\r\n  }\r\n\r\n  render(){\r\n    //console.log(this.state);\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title={`Delete Job: ${this.props.currentJob.projectName}`}\r\n          content='Please ensure all photos are uploaded for this job.  You will lose all the photos for this job.'\r\n          path='/joblist'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    if(state.jobMeta.currentJob){\r\n      const currentJobId = state.jobMeta.currentJob;\r\n      const currentJobCounter = state.jobMeta.jobCounter;\r\n      const currentJob = state.sessions.entities.jobs[currentJobId];\r\n      const currentPictureReq = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n      return{\r\n        currentJobId: currentJobId,\r\n        currentJobCounter: currentJobCounter,\r\n        currentJob: currentJob,\r\n        currentPictureReq: currentPictureReq\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        currentJobId: '',\r\n        currentJobCounter: '',\r\n        currentJob: '',\r\n        currentPictureReq: ''\r\n      }\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log(e);\r\n    //Should only be re-direct requests after a delete\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteJob, setJobCounter, setCurrentJob })(DeleteJob);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { updateCatUploadStatus } from '../../actions';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\nimport db from '../../database/db';\r\n\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nclass UploadAll extends React.Component {\r\n\r\n  state = { cancel: false }\r\n\r\n  /*\r\n  Upload all photos whose uploadStatus is \"False\"\r\n  1.  Get all photos from db whose uploadStatus is \"False\"\r\n  2.  For loop upload all of them\r\n\r\n  Notes:\r\n  Show single notification for all uploads.  Show single notification for error, show all failed filenames (eh)\r\n  */\r\n\r\n  //Get photos w/ uploadStatus: notUploaded\r\n  //call uploadFiles\r\n  getLocalPhotos = async () => {\r\n    const localPhotos = await db.table(this.props.currentJob).where('uploadStatus').equals('notUploaded').toArray();\r\n    //console.log('This is localPhotos: ', localPhotos, localPhotos.length);\r\n    if(localPhotos.length !== 0){\r\n      this.uploadFiles(localPhotos);\r\n    }\r\n    else{\r\n      this.toastSettings(`No photos to Upload!`, 'warning');\r\n      this.setState({ cancel: true });\r\n    }\r\n    //this.setState({ toPath: true });\r\n  }\r\n\r\n  //Upload all files\r\n  uploadFiles = async (localPhotos) => {\r\n\r\n    //re-direct back to category list\r\n    this.setState({ cancel: true });\r\n\r\n    let successArray = [];\r\n    let failArray = [];\r\n    this.toastSettings(`Uploading Files...`, 'info');\r\n\r\n    //for all local photos, try to upload each individually.  Add successes to successArray, failures to failArray\r\n    for(let i = 0; i<localPhotos.length; i++){\r\n      try{\r\n        //Set spinner for category to show user that upload is in progress\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        const photoCategory = tempArray[0];\r\n        this.props.updateCatUploadStatus(photoCategory, 'waiting', this.props.pictureReq );\r\n\r\n\r\n        await uploadImage(localPhotos[i].photo);\r\n        //Get categoryID from photo, add it to successArray\r\n        this.updateStatusTrue(localPhotos[i].photoId);\r\n        successArray.push(photoCategory);\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        failArray.push(tempArray[0]);\r\n        //console.log('this is failArray: ',failArray);\r\n      }\r\n    }\r\n\r\n    //console.log(`SuccessArray: ${successArray} \\nFailArray: ${failArray}`);\r\n    //if there were successful uploads, check if there are any notUploaded photos in category and adjust uploadStatus accordingly\r\n    if(successArray.length !== 0){\r\n      this.toastSettings(`Uploaded images!`, 'success');\r\n      //Only unique Categories\r\n      const uniqueSuccessCategories = [...new Set(successArray)];\r\n      this.checkCategoryUploadStatus(uniqueSuccessCategories);\r\n      //console.log(uniqueCategories);\r\n    }\r\n    if (failArray.length !== 0){\r\n      this.toastSettings(`Some images failed`, 'error');\r\n      const uniqueFailCategories = [...new Set(failArray)];\r\n      this.checkCategoryUploadStatus(uniqueFailCategories);\r\n    }\r\n  }\r\n\r\n  //For all unique categories, checks if there are any photos w/ uploadStatus: notUploaded\r\n  //If all photos are uploaded for a category, change category upload status.  Else do nothing\r\n  checkCategoryUploadStatus = async (categoriesArray) => {\r\n    for(let i = 0; i<categoriesArray.length; i++){\r\n      try{\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${categoriesArray[i]}`;\r\n          })\r\n          .count();\r\n          //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n        if(localCatPhotosCount === 0){\r\n          //Update status\r\n          //console.log('success');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'success', this.props.pictureReq);\r\n        }\r\n        else{\r\n          //console.log('fail');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'fail', this.props.pictureReq);\r\n        }\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Set photo uploadStatus to 'uploaded'\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Get category uploadStatus\r\n  /*\r\n  getStatus = (imageId) => {\r\n    return this.props.categories[imageId].catUploadStatus;\r\n  }\r\n  */\r\n\r\n\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.getLocalPhotos()} className=\"ui button positive\">Upload</button>\r\n        <Link to={`${this.props.currentJob}/categories`} className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to={`${this.props.currentJob}/categories`}/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Upload local photos'\r\n          content='Upload all photos that have not been uploaded yet?'\r\n          path={`${this.props.currentJob}/categories`}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  const currentJob = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJob].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    currentJob: currentJob,\r\n    pictureReq: currentPictureReqs\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(UploadAll);\r\n\r\nexport default connect(mapStateToProps, { updateCatUploadStatus })(toastManager);\r\n","/*\r\nJobList - Menu that shows current saved job sessions\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\n//import { osVersion } from 'react-device-detect';\r\n\r\nimport { setCurrentJob, updateJobColor } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\n\r\nclass JobList extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n\r\n  };\r\n\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('entered redirect');\r\n      this.setState({ toSignin: true });\r\n    }\r\n\r\n    //console.log('this is osVersion: ',osVersion);\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    try{\r\n      for(let i=0; i<this.props.sessionData.length; i++){\r\n        this.checkForPhotoCompletion(this.props.sessionData[i].id);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  checkForPhotoCompletion = async (jobId) => {\r\n    //loop through all existinh job tables and check for any 'norUploaded' photos\r\n    try{\r\n      const uploadedPhotosCount = await db.table(jobId)\r\n        .where('uploadStatus').equals('notUploaded').count();\r\n      const jobPhotosCount = await db.table(jobId).count();\r\n        //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n      if(uploadedPhotosCount === 0 & jobPhotosCount !== 0){\r\n        //all uploaded, go green\r\n        console.log('Green', jobId);\r\n        this.props.updateJobColor(jobId,`rgba(75, 225, 75, 0.2)`);\r\n      }\r\n      else if(uploadedPhotosCount !== 0){\r\n        //some remaining, go red\r\n        this.props.updateJobColor(jobId,`rgba(225, 75, 75, 0.2)`);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  onJobClick = async (jobId) => {\r\n    //console.log('This is job Id: ',jobId);\r\n    await this.props.setCurrentJob(jobId);\r\n    await this.setState({ toCategories: true, jobId: jobId });\r\n    //console.log('jobId: ',this.state.jobId);\r\n  }\r\n\r\n  onDeleteClick = async (jobId) => {\r\n    await this.props.setCurrentJob(jobId);\r\n    this.setState({ toDelete: true, jobId: jobId });\r\n  }\r\n\r\n  renderList(){\r\n    if(this.props.sessionData){\r\n      //console.log('joblist session data: ',this.props.sessionData);\r\n      return this.props.sessionData.map( job => {\r\n        return(\r\n          <div className='item' key={job.id} style={{\r\n            backgroundColor: `${job.color}` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <button className=\"ui negative button\" onClick={() => {this.onDeleteClick(job.id)}}>Delete</button>\r\n            </div>\r\n            <div onClick={() => {this.onJobClick(job.id)}}>\r\n              {job.projectName}\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to={'/delete'} />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    try{\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <div className=\"item\" key='warning' style={{ visibility: this.props.sessionData.length === 10 ? 'visible' : 'hidden' }}>\r\n              Limit 10 jobs.  Delete jobs to make space.\r\n            </div>\r\n            <Link to='/newjob' className=\"item\" key='newJob' style={{ visibility: this.props.sessionData.length === 10 ? 'hidden' : 'visible' }}>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    catch (e){\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <Link to='/newjob' className=\"item\" key='newJob'>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  //Check if there are existing jobs.  If not, let joblist be blank\r\n  //_.compact removed undefined values from jobs\r\n  try{\r\n    return{\r\n      userName: state.userData,\r\n      sessionData: _.compact(Object.values(state.sessions.entities.jobs))\r\n    };\r\n  }\r\n  catch (e){\r\n    //console.log(e);\r\n    return{\r\n      userName: state.userData,\r\n    };\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setCurrentJob, updateJobColor })(JobList);\r\n","/*\r\nSignIn - First menu.  User inputs their username\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { setUsername } from '../../actions';\r\n\r\nimport InputForm from '../InputForm';\r\n\r\nconst userValidation = value => (value && value.length > 3 ? `You must enter a User Name (Max 3 characters)` : undefined)\r\n\r\nclass SignIn extends React.Component{\r\n\r\n  state = { toJobList: false, toSignIn: false };\r\n\r\n  componentDidMount(){\r\n    //if localStorage exists, redirect to /joblist\r\n    if(!localStorage.getItem(\"state\").includes(`\"sessions\":{}`) & !localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('going to joblist');\r\n      this.setState({ toJobList: true });\r\n    }\r\n    else if (!localStorage.getItem(\"state\").includes(`signIn`)){\r\n      //localStorage has old architecture, delete localStorage\r\n      localStorage.clear();\r\n    }\r\n  }\r\n\r\n  onSubmit = (formValues) => {\r\n    formValues.userName = formValues.userName.toUpperCase();\r\n    //console.log('Clicked: ',formValues);\r\n    this.props.setUsername(formValues.userName);\r\n    this.setState({ toJobList: true });\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toJobList){\r\n      return <Redirect to='/joblist' />\r\n    }\r\n\r\n\r\n    return(\r\n      <div>\r\n        <h1 style={{ textAlign: 'center' }}>SolarPix 2.0</h1>\r\n        <h4 style={{ textAlign: 'center' }}>Please Sign In with your Initials</h4>\r\n        <InputForm  initialValues={{ key: 'signIn' }} onSubmit={this.onSubmit} fields={\r\n          [\r\n            {\r\n            name: 'userName',\r\n            label: 'User Initials',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            }\r\n          ]\r\n        }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default connect(null, { setUsername })(SignIn);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { uploadAllPhotos, updateUploadStatus, setUsername } from '../actions';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\nimport NetworkDetector from '../HOCs/NetworkDetector';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\nimport UploadAll from './pages/UploadAll';\r\nimport JobList from './pages/JobList';\r\nimport SignIn from './pages/SignIn';\r\n\r\n\r\n\r\nconst App = (props) => {\r\n\r\n/*\r\n  if(!props.isDisconnected && props.uploadStatus !== 'uploading'){\r\n    //console.log('You have no network connection', props);\r\n    props.updateUploadStatus('uploading');\r\n    props.uploadAllPhotos();\r\n  }\r\n  else if(props.isDisconnected && props.uploadStatus === 'uploading'){\r\n    props.updateUploadStatus('');\r\n  }\r\n*/\r\n\r\n//console.log('ayylmao');\r\n  return (\r\n    <ToastProvider>\r\n      <p>v{process.env.REACT_APP_VERSION}</p>\r\n      {/* <button className=\"ui button\" onClick={() => toSignin(props) }>Click here to delete userName</button> */}\r\n      <div className=\"ui container\" >\r\n        <HashRouter>\r\n          <div>\r\n            <Route path=\"/newjob\" exact component={CreateJob}/>\r\n            <Route path=\"/:job/categories\" exact component={CategoryList}/>\r\n            <Route path=\"/:job/categories/:id\" exact component={CategoryEdit}/>\r\n            <Route path=\"/delete\" exact component={DeleteJob}/>\r\n            <Route path=\"/upload\" exact component={UploadAll}/>\r\n            <Route path=\"/joblist\" exact component={JobList}/>\r\n            <Route path=\"/\" exact component={SignIn}/>\r\n          </div>\r\n        </HashRouter>\r\n      </div>\r\n    </ToastProvider>\r\n  );\r\n}\r\n\r\n//Dev function\r\n/*\r\nconst toSignin = (props) => {\r\n  console.log(\"entering toSignin \", props);\r\n  props.setUsername({});\r\n}\r\n*/\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    uploadStatus: state.uploadStatus,\r\n    userData: state.userData\r\n  }\r\n}\r\n\r\nconst networkDetector = NetworkDetector(App);\r\n\r\nexport default connect(mapStateToProps, { uploadAllPhotos, updateUploadStatus, setUsername })(networkDetector);\r\n//export default App;\r\n","import { SET_CURRENTJOB, SET_JOBCOUNTER } from '../actions/types'\r\n\r\nconst initialState = {\r\n  currentJob: '',\r\n  jobCounter: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type){\r\n    case SET_CURRENTJOB:\r\n      return { ...state, currentJob: action.payload };\r\n\r\n    case SET_JOBCOUNTER:\r\n      const newCount = state.jobCounter + action.payload;\r\n      return { ...state, jobCounter: newCount };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport userReducer from './userReducer';\r\nimport jobReducer from './jobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport pageLocationReducer from './pageLocationReducer';\r\nimport currentJobReducer from './currentJobReducer';\r\nimport uploadStatusReducer from './uploadStatusReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  uploadStatus: uploadStatusReducer,\r\n  userData: userReducer,\r\n  jobMeta: currentJobReducer,\r\n  categoryData: categoriesReducer,\r\n  sessions: jobReducer,\r\n  form: formReducer,\r\n  pageLocation: pageLocationReducer\r\n})\r\n\r\n/*\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'DELETE_JOB'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n*/\r\n\r\n//export default rootReducer;\r\nexport default appReducer;\r\n","import { UPLOAD_ALLIMAGES_STATUS } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case UPLOAD_ALLIMAGES_STATUS:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_USERNAME } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SET_USERNAME:\r\n\r\n      //return { ...state, action.payload };\r\n\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    /*\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      return { ...state, [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        catUploadStatus: action.payload.status\r\n        }\r\n      };\r\n    */\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//import { CREATE_JOBLIST, ADD_JOB } from '../actions/types'\r\n//import _ from 'lodash'\r\nimport {\r\n  CREATE_JOBLIST,\r\n  ADD_JOB,\r\n  DELETE_JOB,\r\n  UPDATE_PHOTOQTY,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  UPDATE_JOBCOLOR\r\n } from '../actions/types'\r\n//import { normalize } from 'normalizr';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOBLIST:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n      //return { ...state };\r\n      //return { ...state, ..._.mapKeys(action.payload, 'id') }\r\n    case UPDATE_PHOTOQTY:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].photoQty = action.payload.photoQty;\r\n      return newState;\r\n\r\n    case DELETE_JOB:\r\n      //Do I even need to do this w/ lodash?\r\n      newState = { ...state };\r\n      /*\r\n      Doesn't work for some reason.  Supposed to completely remove from object\r\n      _.omit(newState.entities.jobs, action.payload.jobId);\r\n      _.omit(newState.entities.pictureReqs, action.payload.pictureReq);\r\n      */\r\n      newState.entities.jobs[action.payload.jobId] = undefined;\r\n      newState.entities.pictureReqs[action.payload.pictureReq] = undefined;\r\n      return newState;\r\n\r\n    case ADD_JOB:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId] = action.payload.jobData;\r\n      newState.entities.pictureReqs[action.payload.pictureReqId] = action.payload.pictureReqData;\r\n      return newState;\r\n\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].catUploadStatus = action.payload.status;\r\n      return newState;\r\n\r\n    case UPDATE_JOBCOLOR:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId].color = action.payload.color;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SAVE_PAGELOCATION\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SAVE_PAGELOCATION:\r\n      return { ...state, yValue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      //onupdatefound, listens for statechange event; fired if installing property acquires a new service worker\r\n      registration.onupdatefound = () => {\r\n        //installing, returns a service worker whose .state property is installing\r\n        const installingWorker = registration.installing;\r\n        //If there's no service worker, exit\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        //onstatechange, fired anytime .state property changes\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import Dexie from 'dexie';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    userData: store.getState().userData,\r\n    sessions: store.getState().sessions,\r\n    jobMeta: store.getState().jobMeta,\r\n    db: store.getState().db\r\n    //categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n\r\nserviceWorker.register();\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n\r\n\r\n//Paste this command into console to check localStorage size.\r\n/*\r\nvar _lsTotal=0,_xLen,_x;for(_x in localStorage){ if(!localStorage.hasOwnProperty(_x)){continue;} _xLen= ((localStorage[_x].length + _x.length)* 2);_lsTotal+=_xLen; console.log(_x.substr(0,50)+\" = \"+ (_xLen/1024).toFixed(2)+\" KB\")};console.log(\"Total = \" + (_lsTotal / 1024).toFixed(2) + \" KB\");\r\n*/\r\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.c5af7465.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.1ad94596.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_salessv.f15da299.bin\";"],"sourceRoot":""}