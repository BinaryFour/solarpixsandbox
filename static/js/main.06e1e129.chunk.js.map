{"version":3,"sources":["apis/files.js","schemas/schemas.js","database/db.js","apis/uploadImage.js","actions/index.js","actions/types.js","components/InputForm.js","components/pages/CreateJob.js","components/Footer.js","components/pages/CategoryList.js","components/CameraComp.js","components/Modal.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/pages/UploadAll.js","components/pages/JobList.js","components/pages/SignIn.js","components/App.js","reducers/currentJobReducer.js","reducers/uploadStatusReducer.js","reducers/index.js","reducers/userReducer.js","reducers/categoriesReducer.js","reducers/jobReducer.js","reducers/pageLocationReducer.js","serviceWorker.js","index.js","localStorage.js","categoryListFile_install","categoryListFile_pcsv","categoryListFile_salessv"],"names":["axios","create","baseURL","timeout","pictureReq","schema","Entity","job","pictureReqs","db","Dexie","version","stores","job1","job2","job3","job4","job5","job6","job7","job8","job9","job0","uploadImage","image","config","auth","username","password","crossDomain","formData","FormData","append","files","post","setJobCounter","increment","type","payload","setCurrentJob","jobId","updateCatUploadStatus","categoryId","status","photoReq","InputForm","renderInput","label","input","meta","className","error","touched","autoComplete","renderError","renderDropdown","props","value","onSubmit","formValues","this","fields","map","field","Field","name","key","component","dropdown","validate","handleSubmit","renderList","React","Component","reduxForm","form","userValidation","undefined","CreateJob","state","toCategories","toDelete","toSignin","getOpenJobId","currentJobs","jobs","Object","keys","length","i","_","findKey","id","a","projName","projectName","toUpperCase","localStorage","getItem","includes","createJobList","profileName","jobIdNum","Number","isInteger","addNewJob","console","log","setState","currentJob","Redirect","to","initialValues","connect","jobMeta","counter","jobCounter","pickBy","sessions","entities","e","dispatch","colormap","require","categoryArray","superCatArray","get","categoryListFile_install","response","categoryListFile_pcsv","categoryListFile_salessv","data","split","forEach","category","tempArray","obj","title","description","photoQty","catUploadStatus","push","uniqueSuperCats","Set","colorCount","colors","nshades","format","alpha","cellColor","parseInt","pictureReqId","jobData","color","pictureReqData","categories","normalJobData","normalize","Footer","width","links","link","Link","path","style","classname","CategoryList","pageLocation","window","scrollTo","saveLocation","pageYOffset","backgroundColor","textAlign","success","fail","neutral","waiting","display","height","ownProps","currentJobId","currentPictureReqs","userName","userData","values","yValue","readTextFile","textFile","location","styles","CameraComp","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","stopPropagation","content","alt","src","marginBottom","actions","document","querySelector","CategoryEdit","_isMounted","testVar","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","showPermissionsMsg","os","osVersion","componentDidMount","isOpen","open","getThumbnails","srcToFile","fetch","res","arrayBuffer","countLocalPhotos","table","where","equals","and","result","photoId","count","localCatPhotosCount","onClickThumbnail","URL","createObjectURL","photo","lastModifiedDate","size","uploadFile","toastSettings","updateStatusTrue","verifyImage","imageURL","onAddPhoto","imgData","fileData","cameraChoice","timeStamp","Math","floor","Date","now","process","osName","renamedFile","File","saveToDb","img","add","fileName","uploadStatus","update","startsWith","toArray","updatePhotoQty","message","toastManager","appearance","autoDismiss","Fragment","renderActions","onDismiss","onTakePhoto","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","isImageMirror","isMaxResolution","onCameraError","withToastManager","getCategory","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","currentPictureReq","clear","deleteJob","currentJobCounter","UploadAll","getLocalPhotos","localPhotos","verifiedPhotos","x","uploadFiles","successArray","failArray","photoCategory","uniqueSuccessCategories","checkCategoryUploadStatus","uniqueFailCategories","categoriesArray","JobList","checkForPhotoCompletion","uploadedPhotosCount","jobPhotosCount","updateJobColor","onJobClick","onDeleteClick","sessionData","visibility","compact","SignIn","toJobList","toSignIn","setUsername","App","HashRouter","Route","exact","initialState","appReducer","combineReducers","action","newCount","categoryData","mapKeys","newState","formReducer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","persistedState","localState","JSON","parse","err","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","stringify","setItem","setLocalStorage","render","href","origin","addEventListener","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.06e1e129.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL: 'https://binaryfour.github.io',\r\n  timeout: 10000\r\n})\r\n","import { schema } from 'normalizr';\r\n//Root category defined at bottom, after deepest object defined first.\r\n\r\n//Define a categories schema\r\nconst pictureReq = new schema.Entity('pictureReqs');\r\n\r\n//Define a job schema\r\nconst job = new schema.Entity('jobs', {\r\n  pictureReqs: pictureReq\r\n});\r\n\r\n//Define a job array\r\n\r\nexport { job };\r\n//const normalizedData = normalize(localStorage.state, job);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\n\r\ndb.version(3).stores({\r\n    job1: `photoId, uploadStatus`,\r\n    job2: `photoId, uploadStatus`,\r\n    job3: `photoId, uploadStatus`,\r\n    job4: `photoId, uploadStatus`,\r\n    job5: `photoId, uploadStatus`,\r\n    job6: `photoId, uploadStatus`,\r\n    job7: `photoId, uploadStatus`,\r\n    job8: `photoId, uploadStatus`,\r\n    job9: `photoId, uploadStatus`,\r\n    job0: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","import files from '../apis/files';\r\n\r\n//import axiosRetry from 'axios-retry';\r\n\r\nconst uploadImage = (image) => {\r\n\r\n  //axios retry for exponential back-off\r\n  //axiosRetry(files, { retryDelay: axiosRetry.exponentialDelay });\r\n\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  //Check if formData image is messed up.\r\n  /*\r\n  if(formData.get('upload').size === 0 || image.lastModified === 0){\r\n    console.log('This is formData: ', formData.get('upload'));\r\n    return new Promise.reject(new Error('Image Corrupted'));\r\n  }\r\n  */\r\n\r\n\r\n  return files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n  //return Promise.reject();\r\n  //return axiosRetry(files)\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","import files from '../apis/files';\r\nimport categoryListFile_install from '../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../categoryListFile_pcsv';\r\nimport categoryListFile_salessv from '../categoryListFile_salessv';\r\nimport { normalize } from 'normalizr';\r\nimport { job } from '../schemas/schemas';\r\nimport db from '../database/db';\r\nimport uploadImage from '../apis/uploadImage';\r\n\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  ADD_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPDATE_PHOTOQTY,\r\n  DELETE_JOB,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  SAVE_PAGELOCATION,\r\n  SET_USERNAME,\r\n  CREATE_JOBLIST,\r\n  SET_CURRENTJOB,\r\n  SET_JOBCOUNTER,\r\n  UPLOAD_ALLIMAGES,\r\n  UPLOAD_ALLIMAGES_STATUS,\r\n  UPDATE_JOBCOLOR\r\n} from './types';\r\n\r\n\r\nexport const updateJobColor = (job, color) => {\r\n\r\n  return {\r\n    type: UPDATE_JOBCOLOR,\r\n    payload: {\r\n      color: color,\r\n      jobId: job\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUploadStatus = (status) => {\r\n\r\n  return {\r\n    type: UPLOAD_ALLIMAGES_STATUS,\r\n    payload: status\r\n  }\r\n}\r\n\r\n/*\r\nGet all photos that are not uploaded,\r\nfor loop upload them all.  On success, update the db entry and the category uploadStatus for the photo\r\n\r\n*/\r\nexport const uploadAllPhotos = () => async (dispatch, getState) => {\r\n\r\n  console.log('entered uploadAllPhotos');\r\n  if(!db.isOpen()){\r\n    db.open();\r\n  }\r\n  let photoArray = [];\r\n  let successArray = [];\r\n  let failArray = [];\r\n  let uniqueSuccess = [];\r\n  let uniqueObjs = [];\r\n  //See if there are photos w/ \"notUploaded\" status\r\n  //const photosToUpload = await db.table().where('uploadStatus').equals('notUploaded').toArray();\r\n  const tables = db.tables;\r\n  for(let i=0; i<tables.length; i++){\r\n    const tempArray = await db.table(tables[i].name).where('uploadStatus').equals('notUploaded').toArray();\r\n    photoArray = photoArray.concat(tempArray);\r\n  }\r\n  //console.log('This is photoArray: ', photoArray, photoArray.length);\r\n  //photoArray now has all photos\r\n  if(photoArray.length !== 0){\r\n    //begin automatic upload\r\n    for(let j=0; j<photoArray.length; j++){\r\n      const photoData = photoArray[j];\r\n      try{\r\n        //Upload photo, update db status\r\n        dispatch(updateCatUploadStatus(photoData.photoId[0], 'waiting', photoData.pictureReq));\r\n        await uploadImage(photoData.photo);\r\n        await db.table(photoData.job).update(photoData.photoId, { uploadStatus: 'uploaded' });\r\n        successArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        //updateCatUploadStatus(categoryId, 'success', photoData.pictureReq);\r\n\r\n      }\r\n      catch (e){\r\n        failArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        console.log(e);\r\n      }\r\n    }\r\n    console.log('successArray', successArray, 'failArray', failArray);\r\n    //After for loop finishes, Get all unique uploads and update all category upload icons (code from CategoryEdit)\r\n    try{\r\n      uniqueSuccess = [...new Set(successArray.map(x => JSON.stringify(x)))];\r\n      uniqueObjs = [...new Set(uniqueSuccess.map(x => JSON.parse(x)))];\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n\r\n    console.log('uniqueObjs', uniqueObjs);\r\n    for(let k=0; k<uniqueObjs.length; k++){\r\n      const successUpload = uniqueObjs[k];\r\n      let status = 'neutral';\r\n\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(successUpload.job)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${successUpload.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        dispatch(updateCatUploadStatus(successUpload.categoryId, status, successUpload.pictureReq));\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n      }\r\n    }\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n  else{\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n\r\n\r\n\r\n  dispatch({ type: UPLOAD_ALLIMAGES, payload:  0 });\r\n\r\n}\r\n\r\nexport const setJobCounter = (increment) => {\r\n\r\n  return{\r\n    type: SET_JOBCOUNTER,\r\n    payload: increment\r\n  }\r\n}\r\n\r\nexport const setCurrentJob = (jobId) => {\r\n\r\n  return{\r\n    type: SET_CURRENTJOB,\r\n    payload: jobId\r\n  }\r\n}\r\n\r\nexport const setUsername = (userName) => {\r\n  return{\r\n    type: SET_USERNAME,\r\n    payload: userName\r\n  }\r\n}\r\n\r\n//Saves window page y so that users return to the same location on categoryList page\r\nexport const saveLocation = (location) => {\r\n\r\n  return{\r\n    type: SAVE_PAGELOCATION,\r\n    payload: location\r\n  }\r\n}\r\n\r\n//Sets category property 'uploadStatus'.  Used to show unique icon\r\nexport const updateCatUploadStatus = (categoryId, status, photoReq) => {\r\n\r\n  return{\r\n    type: UPDATE_CATUPLOADSTATUS,\r\n    payload: {\r\n      status: status,\r\n      categoryId: categoryId,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//Delete job, pictureReqs for jobId (db table deleted in DeleteJob component)\r\nexport const deleteJob = (jobId, pictureReq) => {\r\n  //window.localStorage.clear();\r\n  //\r\n\r\n  return{\r\n    type: DELETE_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReq: pictureReq\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n*/\r\n\r\nexport const updatePhotoQty = (categoryId, photoQty, photoReq) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      categoryId: categoryId,\r\n      photoQty: photoQty,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n1.  Create object array using text file based on profileName\r\n2.  For every superCategory, add a unique color to all categories\r\n3.  Create normalized object to put into store (job -> photoReqs)\r\n*/\r\n\r\n//TODO:  Perform steps 1 & 2 once for all unique profileNames, then store the data in the store(?) for future use\r\nexport const createJobList = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  //Color spectrum minimum is 11 colors (Package)\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: {\r\n        id: pictureReqId, jobId: jobId, categories: categoryArray\r\n      },\r\n    color: ''\r\n  }\r\n\r\n  const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: CREATE_JOBLIST,\r\n    payload: normalJobData\r\n  })\r\n/*\r\n\r\n  return{\r\n    type: CREATE_JOBLIST,\r\n    payload:\r\n      { [initialJobId]:\r\n        {\r\n          id: initialJobId,\r\n          projectName: projectName,\r\n          profileName: profileName\r\n        }\r\n      }\r\n  }\r\n*/\r\n}\r\n\r\n//Submit button saves NewJob data\r\nexport const addNewJob = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: pictureReqId,\r\n    color: ''\r\n  }\r\n\r\n  const pictureReqData = {\r\n    id: pictureReqId,\r\n    jobId: jobId,\r\n    categories: categoryArray\r\n  }\r\n\r\n  //const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: ADD_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReqId: pictureReqId,\r\n      jobData: jobData,\r\n      pictureReqData: pictureReqData\r\n    }\r\n  })\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\n\r\n\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    let colormap = require('colormap');\r\n\r\n    var categoryArray = [];\r\n    var superCatArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n        categoryArray.push(obj);\r\n        superCatArray.push(obj.title[0]);\r\n        counter += 1;\r\n      }\r\n    });\r\n\r\n    //Assigning unique colors for each supercategory\r\n    const uniqueSuperCats = [...new Set(superCatArray)];\r\n    let colorCount = 11\r\n    if(uniqueSuperCats.length > 11){\r\n      colorCount = uniqueSuperCats.length;\r\n    }\r\n    let colors = colormap({\r\n      colormap: 'hsv',\r\n      nshades: colorCount,\r\n      format: 'rgba',\r\n      alpha: 0.2\r\n    })\r\n    //console.log(colors)\r\n\r\n    categoryArray.forEach( category => {\r\n      category.cellColor = colors[parseInt(category.title[0])];\r\n    });\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  //console.log(getState());\r\n  const currentJobId = getState().currentJob;\r\n  const currentPictureReqs = getState().sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  const category = getState().sessions.entities.pictureReqs[currentPictureReqs].categories[id];\r\n  //const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const ADD_JOB = 'ADD_JOB';\r\nexport const CREATE_JOBLIST = 'CREATE_JOBLIST';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\nexport const UPDATE_CATUPLOADSTATUS = 'UPDATE_CATUPLOADSTATUS';\r\nexport const SAVE_PAGELOCATION = 'SAVE_PAGELOCATION';\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\nexport const SET_CURRENTJOB = 'SET_CURRENTJOB';\r\nexport const SET_JOBCOUNTER = 'SET_JOBCOUNTER';\r\nexport const REFRESH_STORE = 'REFRESH_STORE';\r\nexport const UPLOAD_ALLIMAGES = 'UPLOAD_ALLIMAGES';\r\nexport const UPLOAD_ALLIMAGES_STATUS = 'UPLOAD_ALLIMAGES_STATUS';\r\nexport const UPDATE_JOBCOLOR = 'UPDATE_JOBCOLOR';\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"install\">Install</option>\r\n          <option value=\"pcsv\">PCSV</option>\r\n          <option value=\"salessv\">Sales SV</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    //console.log('Input form onSubmit: ',formValues);\r\n    this.props.onSubmit(formValues);\r\n\r\n  }\r\n\r\n\r\n\r\n  //render dynamic field list\r\n  renderList(){\r\n    return this.props.fields.map( field => {\r\n      return(\r\n        <Field name={field.name} label={field.label} key={field.key} component=\r\n        {{\r\n          input: this.renderInput,\r\n          dropdown: this.renderDropdown\r\n        }[field.component]}\r\n        validate={field.validate}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    //console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <br/>\r\n        <button className=\"fluid ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  /*\r\n  render(){\r\n    console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  */\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\n\r\n/*\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  //console.log(formValues.profileName);\r\n\r\n  if (!formValues.userName || formValues.userName.length > 3){\r\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n*/\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm'\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { addNewJob, createJobList, setCurrentJob, setJobCounter } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\n//import database from '../../database/db';\r\n\r\nconst userValidation = value => (!value ? 'You must enter a Project Name' : undefined)\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n  }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('entered redirect');\r\n      this.setState({ toSignin: true });\r\n    }\r\n    //console.log(this.props.jobs);\r\n    /*\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n    */\r\n  }\r\n\r\n  /*\r\n  createNewDb = async (jobId) => {\r\n    try{\r\n      if(!db.isOpen()){\r\n        await db.open();\r\n      }\r\n      db.close();\r\n      console.log('dbVerNo: ',db.verno, ' dbVerNo+1: ',db.verno+1);\r\n      await db.version(db.verno+1).stores({\r\n          [jobId]: `photoId, uploadStatus`\r\n      });\r\n      db.open();\r\n\r\n    }\r\n    catch(e){\r\n      console.log('db creation failed', e);\r\n    }\r\n  }\r\n  */\r\n\r\n  /*\r\n  createDb = (jobId) => {\r\n    const dataBase = new Dexie('empowerDb');\r\n\r\n    this.props.createDatabase(dataBase);\r\n\r\n    const db = this.props.db;\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n\r\n  createDbTable = (jobId) => {\r\n    const db = this.props.db;\r\n    if(db.isOpen()){\r\n      db.close();\r\n    }\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n  */\r\n  getOpenJobId = () => {\r\n    const currentJobs = this.props.jobs;\r\n    if(Object.keys(this.props.jobs).length >= 10){\r\n      return null;\r\n    }\r\n    else{\r\n      //Find an available jobId slot (starting from 0, asc);\r\n      for(var i=0; i<10; i++){\r\n        if(!_.findKey(currentJobs, { id: `job${i}` })){\r\n            //console.log(`should be the first non-existing jobId`);\r\n            return i;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list (Set userName to capitals)\r\n  onSubmit = async (formValues) => {\r\n    const projName = formValues.projectName.toUpperCase();\r\n    //If there are no current jobs, create jobList w/ normalized data\r\n    if(localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\r\n      await this.props.createJobList(projName, formValues.profileName, 0);\r\n      await this.props.setCurrentJob(`job0`);\r\n    }\r\n    //Otherwise, create a new job and merge data w/ store\r\n    else{\r\n      const jobIdNum = this.getOpenJobId();\r\n      //console.log(jobIdNum);\r\n      if(Number.isInteger(jobIdNum)){\r\n        await this.props.addNewJob(projName, formValues.profileName, jobIdNum);\r\n        await this.props.setCurrentJob(`job${jobIdNum}`);\r\n      }\r\n      else{\r\n        //prevent user from creating another job\r\n        console.log('There are already 10 jobs');\r\n      }\r\n    }\r\n    //this.props.setJobCounter(1);\r\n    //this.createNewDb(this.props.currentJob);\r\n\r\n\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true, jobId: this.props.currentJob });\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to='/delete' />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>New Job</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install' }}\r\n        fields={\r\n          [\r\n            {\r\n            name: 'projectName',\r\n            label: 'Project Name (try to use one word, all use same)',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            },\r\n            {\r\n            name: 'profileName',\r\n            label: 'Profile',\r\n            component: 'dropdown',\r\n            key: 'field2'\r\n            }\r\n          ]\r\n        }\r\n        //TODO: pass down field information\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n      jobs: _.pickBy(state.sessions.entities.jobs, undefined),\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log('jobs dont exist yet');\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { addNewJob, createJobList, setCurrentJob, setJobCounter })(CreateJob);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    //determine width of each button based on number of buttons\r\n    const width = `${100/this.props.links.length}%`;\r\n\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id} style={{ width: width }}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return(\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\n//import categoryListFile_install from '../../categoryListFile_install';\r\n//import categoryListFile_pcsv from '../../categoryListFile_pcsv';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { readTextFile, saveLocation } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n//import offline from 'offline-js';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/joblist', id: 'jobList', label: 'Back' },\r\n  { path: '/upload', id: 'uploadAll', label: 'Upload All' }\r\n]\r\n\r\n//Used for deciding which icon to show for category Upload status\r\n//const catUploadStatuses =\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  state = {\r\n    toSignin: false\r\n  }\r\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\r\n  //Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      this.setState({toSignin: true});\r\n    }\r\n    //console.log(this.props.sessions);\r\n    //If there is a saved page location, send user back to that position\r\n    if(this.props.pageLocation){\r\n      window.scrollTo(0, this.props.pageLocation);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    //save page position\r\n    //console.log('Y offset ', window.pageYOffset);\r\n    this.props.saveLocation(window.pageYOffset);\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  //change icons based on catUploadStatus\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <Link to={`categories/${category.id}`} className=\"item\" key={category.id} style={{ backgroundColor:\r\n          `rgba(${category.cellColor[0]},${category.cellColor[1]},${category.cellColor[2]},${category.cellColor[3]})` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <div className=\"description\">\r\n                Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          {{\r\n            success: <i className='large middle aligned inverted green check icon'></i>,\r\n            fail: <i className='large middle aligned inverted red x icon'></i>,\r\n            neutral: <i className='large middle aligned inverted gray minus icon'></i>,\r\n            waiting: <i className='large middle aligned cog loading icon'></i>\r\n          }[category.catUploadStatus]}\r\n          <div className=\"content\" >\r\n            <div className=\"header\">{category.title}</div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    if(this.state.toSignin){\r\n      return(\r\n        <Redirect to='/' />\r\n      );\r\n    }\r\n\r\n    return(\r\n        <div>\r\n          <h2>Category List: {this.props.job.projectName}</h2>\r\n          <div className=\"ui celled list\" >{this.renderList()}</div>\r\n          <div className=\"padding\" style={{ display: 'block', height: '48px' }}></div>\r\n          <Footer links={links}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    userName: state.userData,\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    categories: Object.values(state.sessions.entities.pictureReqs[currentPictureReqs].categories),\r\n    pageLocation: state.pageLocation.yValue,\r\n\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile, saveLocation })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass CameraComp extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui fluid labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui fluid button large primary\" htmlFor=\"file\">Use Camera App</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CameraComp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\nimport { osVersion, osName } from 'react-device-detect';\r\n\r\nimport db from '../../database/db';\r\nimport CameraComp from '../CameraComp';\r\nimport Footer from '../Footer';\r\nimport Modal from '../Modal';\r\n\r\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\n\r\n//import detectConnection from '../detectConnection';\r\n\r\n//USED to be used for footer lol\r\n/*\r\nconst links = [\r\n  { path: `/categories`, id:'categoryList', label: 'Back' }\r\n];\r\n*/\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none',\r\n    showPermissionsMsg: false,\r\n    content: '',\r\n    os: osVersion\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount = async () =>{\r\n    //Set _isMounted var to true for potential unmount\r\n    this._isMounted = true;\r\n\r\n    //If the database isn't open, open it and get thumbnails\r\n    if(!db.isOpen()){\r\n      await db.open();\r\n    }\r\n    this.getThumbnails();\r\n\r\n    //If Camera permission is denied, tell user to enable camera permissions\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  //Update state w/ uploadStatus: unsent:fail, sentAll:success, default:neutral\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.countLocalPhotos();\r\n  }\r\n\r\n/*\r\nCamera Methods\r\n*/\r\n  onCameraError(error) {\r\n    console.log('This is the camera Error: ',error);\r\n    this.setState({ showPermissionsMsg: true });\r\n  }\r\n\r\n//https://stackoverflow.com/questions/6850276/how-to-convert-dataurl-to-file-object-in-javascript\r\n  //load src and convert to a File instance object\r\n  //work for any type of src, not only image src.\r\n  //return a promise that resolves with a File instance\r\n\r\n  srcToFile = async (src) => {\r\n    console.log('entered srcToFile');\r\n    try{\r\n      const res = await fetch(src);\r\n      //console.log('this is res: ', res);\r\n      return res.arrayBuffer();\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n/*\r\nEdit Methods\r\n*/\r\n\r\n  //Counts the amount of not-Uploaded photos in this category.  Sets store value\r\n  countLocalPhotos = async () => {\r\n    //console.log('Entered countLocalPhotos');\r\n    const photoQty = this.props.category.photoQty;\r\n\r\n    //If there are no photos, do nothing\r\n    if (photoQty !== 0){\r\n      let status = 'neutral';\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${this.state.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        this.props.updateCatUploadStatus(this.state.categoryId, status, this.props.job.pictureReqs);\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n\r\n      }\r\n    }\r\n    //console.log('localCatPhotosCount', localCatPhotosCount);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n    console.log(image);\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({\r\n        showModal: '',\r\n        image: image.photo,\r\n        showImage: showImage,\r\n        imageId: image.photoId,\r\n        content: `photoId: ${image.photoId}\r\n        lastModified: ${image.photo.lastModifiedDate}\r\n        imageSize: ${image.photo.size}`\r\n      });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image/state.imageId\r\n  uploadFile = async () => {\r\n    const imageId = this.state.imageId;\r\n    const image = this.state.image;\r\n    await this.setState({\r\n              showModal: 'none',\r\n              image: {},\r\n              showImage: '',\r\n              imageId: ''\r\n            })\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    try{\r\n      await uploadImage(image);\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('FAIL: Image upload fail.  You can click on the thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n  //Verify imageFile exists, not a blank file w/ no size\r\n  verifyImage = async (image) => {\r\n    console.log('entered verifyImage');\r\n    if(image.size === 0){\r\n      console.log(image);\r\n      return false;\r\n    }\r\n    const imageURL = URL.createObjectURL(image);\r\n    try{\r\n      //see if you can fetch the image.  If you can, should be good\r\n      await fetch(imageURL);\r\n      return true;\r\n    }\r\n    catch(e){\r\n      console.log(`GET Failed, ${imageURL}`,e);\r\n      //notify user of issue, delete corrupt image from indexeddb\r\n      console.log('exit');\r\n      return false;\r\n\r\n    }\r\n  }\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name\r\n  //Embedded Camera\r\n  onAddPhoto = async (imgData) => {\r\n    //Check if imgData is string or object\r\n    //console.log('this is typeof: ',typeof imgData);\r\n    let fileData = imgData;\r\n    let cameraChoice = 'N';\r\n\r\n    //If using embedded Camera\r\n    if(typeof imgData == \"string\"){\r\n      fileData = await this.srcToFile(imgData);\r\n      cameraChoice = 'E';\r\n    }\r\n\r\n    //console.log('this is arrBuffer: ', arrBuffer);\r\n    const job = this.props.job;\r\n    const userName = this.props.userName;\r\n    const timeStamp = Math.floor(Date.now() / 1000);\r\n\r\n    const imageQty = this.state.imageQty + 1;\r\n    //TODO: Add several things to title: iOS vers, App vers, which camera was used\r\n    //aV: App Version, os: iOS version, cA: Camera used (E: Embedded, N: Native)\r\n    const imageTitle = `${job.projectName}-${job.profileName}_${this.props.category.title}-${imageQty}_${userName}{av${process.env.REACT_APP_VERSION}-${osName}_${this.state.os}-ca${cameraChoice}}`;\r\n    const imageId = `${this.state.categoryId}_${timeStamp}`;\r\n    //Set current imageId to lastmodified date and rename file\r\n    const renamedFile = new File([fileData], imageTitle+'.jpeg', {type: 'image/jpeg'} );\r\n\r\n    console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n    await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n    //Save file to db, upload photo to server, refresh current page w/ thumbnails\r\n    try{\r\n      await this.saveToDb(renamedFile);\r\n    }catch(error){\r\n      //If saveToDb fails, notify user w/ error code.\r\n      this.toastSettings(`FAIL: Image NOT Saved.  Please re-take the photo. ${error}`, 'error');\r\n    }\r\n\r\n    this.getThumbnails();\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    //console.log(renamedFile);\r\n    //If image is verified (image not corrupt) set for upload\r\n    if(this.verifyImage(renamedFile)){\r\n      try{\r\n        //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n        /*TODO: If uploads are being corrupted, wouldn't that mean that uploadImage here\r\n          is the root cause?  Uploading renamedFile coming in as 0kb file.\r\n        */\r\n        const response = await uploadImage(renamedFile);\r\n        console.log('This is response', response);\r\n        if(response.status === 200){\r\n          this.toastSettings('SUCCESS: Uploaded Image!','success');\r\n          this.updateStatusTrue(imageId);\r\n          //This causes issues if component unmounts.  Illegal setState\r\n          if(this._isMounted){\r\n            this.getThumbnails();\r\n          }\r\n        }\r\n        else{\r\n          this.toastSettings(`FAIL: Image NOT uploaded. Send to Dev: ${response.status}`,'error');\r\n        }\r\n\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        this.toastSettings(`FAIL: Image NOT uploaded.  Please check your internet connection and try again. ${e}`,'error');\r\n        //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n      }\r\n    }\r\n    else{\r\n      this.toastSettings(`FAIL: Image corrupted, Please re-take the photo`,'error');\r\n    }\r\n\r\n\r\n  }\r\n\r\n  //Saves image to db\r\n  saveToDb = (img) => {\r\n      return db.table(this.props.currentJob).add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: 'notUploaded', photo: img, job:this.props.currentJob, pictureReq: this.props.job.pictureReqs });\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = (imageId) => {\r\n      return db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    console.log('Enter getThumbnails');\r\n    let thumbnails = [];\r\n    let photoQty = 0;\r\n    const categoryId = this.state.categoryId;\r\n    try{\r\n      thumbnails = await db.table(this.props.currentJob).where('photoId').startsWith(`${categoryId}_`).toArray();\r\n      //console.log(thumbnails);\r\n      photoQty = thumbnails.length;\r\n      //console.log('no error');\r\n    }\r\n    catch (e){\r\n      console.log('No Photos', e);\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    //console.log(thumbnails);\r\n    this.props.updatePhotoQty(categoryId, photoQty, this.props.job.pictureReqs);\r\n    this.setState({ imageQty: photoQty, thumbnails: thumbnails });\r\n    //console.log('end of getThumbnails');\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        //console.log(imageURL);\r\n        //this.verifyImage(image.photo);\r\n        //console.log('This is image:',imageURL);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus === 'uploaded' ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          content={this.state.content}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <h4 style={this.state.showPermissionsMsg ? {} : {display: 'none'}}>You must allow access to the Camera.  If you denied the permission, please go to your chrome settings and enable the Camera permission for this site</h4>\r\n        <div>\r\n          <CameraComp onSubmit = {this.onAddPhoto} />\r\n          <Camera\r\n            onTakePhoto = { (imgData) => { this.onAddPhoto(imgData); } }\r\n            idealFacingMode = {FACING_MODES.ENVIRONMENT}\r\n            imageType = {IMAGE_TYPES.JPG}\r\n            isImageMirror = {false}\r\n            isMaxResolution = {true}\r\n            onCameraError = { (error) => { this.onCameraError(error); } }\r\n          />\r\n          <h3>Photos: {this.state.imageQty}</h3>\r\n          <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n        <Footer links={[\r\n          { path: `/${this.props.currentJob}/categories`, id:'categoryList', label: 'Back' }\r\n        ]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n  //console.log(state.sessions.entities.pictureReqs[currentPictureReqs].categories);\r\n  //console.log(ownProps.match.params.id);\r\n\r\n  return{\r\n    category: state.sessions.entities.pictureReqs[currentPictureReqs].categories[ownProps.match.params.id],\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    userName: state.userData,\r\n    currentJob: currentJobId\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { deleteJob, setJobCounter, setCurrentJob } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    const jobId = this.props.currentJobId;\r\n    const pictureReq = this.props.currentPictureReq;\r\n    //console.log(jobId, pictureReq);\r\n    try{\r\n      db.table(jobId).clear();\r\n      this.props.setCurrentJob('');\r\n      await this.props.deleteJob(jobId, pictureReq);\r\n    }\r\n    catch (e){\r\n      console.log('Table did not clear',e);\r\n    }\r\n\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={async () => await this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    /*\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    */\r\n  }\r\n\r\n  render(){\r\n    //console.log(this.state);\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title={`Delete Job: ${this.props.currentJob.projectName}`}\r\n          content='Please ensure all photos are uploaded for this job.  You will lose all the photos for this job.'\r\n          path='/joblist'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    if(state.jobMeta.currentJob){\r\n      const currentJobId = state.jobMeta.currentJob;\r\n      const currentJobCounter = state.jobMeta.jobCounter;\r\n      const currentJob = state.sessions.entities.jobs[currentJobId];\r\n      const currentPictureReq = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n      return{\r\n        currentJobId: currentJobId,\r\n        currentJobCounter: currentJobCounter,\r\n        currentJob: currentJob,\r\n        currentPictureReq: currentPictureReq\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        currentJobId: '',\r\n        currentJobCounter: '',\r\n        currentJob: '',\r\n        currentPictureReq: ''\r\n      }\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log(e);\r\n    //Should only be re-direct requests after a delete\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteJob, setJobCounter, setCurrentJob })(DeleteJob);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { updateCatUploadStatus } from '../../actions';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\nimport db from '../../database/db';\r\n\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nclass UploadAll extends React.Component {\r\n\r\n//TODO:  Why would uploadALl upload 0kb images?  Images still exist in db if you click thumbnail,\r\n//upload from thumbnail uploads correct image.  IndexedDB timeout?\r\n\r\n  state = { cancel: false }\r\n\r\n  /*\r\n  Upload all photos whose uploadStatus is \"False\"\r\n  1.  Get all photos from db whose uploadStatus is \"False\"\r\n  2.  For loop upload all of them\r\n\r\n  Notes:\r\n  Show single notification for all uploads.  Show single notification for error, show all failed filenames (eh)\r\n  */\r\n  componentDidMount = async () => {\r\n    //If the database isn't open, open it to get access to photos\r\n    if(!db.isOpen()){\r\n      await db.open();\r\n    }\r\n  }\r\n\r\n  //Get photos w/ uploadStatus: notUploaded\r\n  //call uploadFiles\r\n  getLocalPhotos = async () => {\r\n    try{\r\n      const localPhotos = await db.table(this.props.currentJob).where('uploadStatus').equals('notUploaded').toArray();\r\n      this.toastSettings(`localPhotos: ${localPhotos}`, 'error');\r\n      //console.log('This is localPhotos: ', localPhotos, localPhotos.length);\r\n      if(localPhotos.length !== 0){\r\n        let verifiedPhotos = [];\r\n        //verify images exist, then upload non-corrupted files\r\n        for(let x = 0; x<localPhotos.length; x++){\r\n          const image = localPhotos[x].photo;\r\n          if(image.size !== 0){\r\n            //Image verified, show notification\r\n            verifiedPhotos.push(localPhotos[x]);\r\n          }\r\n          else{\r\n            this.toastSettings(`Photo not verified, size: ${image.size}`, 'error');\r\n          }\r\n        }\r\n\r\n        console.log('localPhotos: ',localPhotos);\r\n        console.log('verifiedPhotos: ',verifiedPhotos);\r\n        this.uploadFiles(verifiedPhotos);\r\n      }\r\n      else{\r\n        this.toastSettings(`No photos to Upload!`, 'warning');\r\n        this.setState({ cancel: true });\r\n      }\r\n    }\r\n    catch(e){\r\n      console.log(e);\r\n      this.toastSettings(`FAIL: Could not get images. ${e}`,'error');\r\n      //re-direct back to category list\r\n      this.setState({ cancel: true });\r\n    }\r\n    //this.setState({ toPath: true });\r\n  }\r\n\r\n  //Verify imageFile exists, not a blank file w/ no size\r\n  /*\r\n  verifyImage = async (image) => {\r\n    console.log('entered verifyImage');\r\n    if(image.size === 0){\r\n      console.log(image);\r\n      return false;\r\n    }\r\n    const imageURL = URL.createObjectURL(image);\r\n    try{\r\n      //see if you can fetch the image.  If you can, should be good\r\n      await fetch(imageURL);\r\n      return true;\r\n    }\r\n    catch(e){\r\n      console.log(`GET Failed, ${imageURL}`,e);\r\n      //notify user of issue, delete corrupt image from indexeddb\r\n      console.log('exit');\r\n      return false;\r\n\r\n    }\r\n  }\r\n  */\r\n\r\n  //Upload all files\r\n  uploadFiles = async (localPhotos) => {\r\n\r\n    //re-direct back to category list\r\n    this.setState({ cancel: true });\r\n\r\n    let successArray = [];\r\n    let failArray = [];\r\n    this.toastSettings(`Uploading Files...`, 'info');\r\n\r\n    //for all local photos, try to upload each individually.  Add successes to successArray, failures to failArray\r\n    for(let i = 0; i<localPhotos.length; i++){\r\n      try{\r\n        //Set spinner for category to show user that upload is in progress\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        const photoCategory = tempArray[0];\r\n        this.props.updateCatUploadStatus(photoCategory, 'waiting', this.props.pictureReq );\r\n\r\n\r\n        await uploadImage(localPhotos[i].photo);\r\n        //Get categoryID from photo, add it to successArray\r\n        this.updateStatusTrue(localPhotos[i].photoId);\r\n        successArray.push(photoCategory);\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        failArray.push(tempArray[0]);\r\n        //console.log('this is failArray: ',failArray);\r\n      }\r\n    }\r\n\r\n    //console.log(`SuccessArray: ${successArray} \\nFailArray: ${failArray}`);\r\n    //if there were successful uploads, check if there are any notUploaded photos in category and adjust uploadStatus accordingly\r\n    if(successArray.length !== 0){\r\n      this.toastSettings(`Uploaded images!`, 'success');\r\n      //Only unique Categories\r\n      const uniqueSuccessCategories = [...new Set(successArray)];\r\n      this.checkCategoryUploadStatus(uniqueSuccessCategories);\r\n      //console.log(uniqueCategories);\r\n    }\r\n    if (failArray.length !== 0){\r\n      this.toastSettings(`Some images failed`, 'error');\r\n      const uniqueFailCategories = [...new Set(failArray)];\r\n      this.checkCategoryUploadStatus(uniqueFailCategories);\r\n    }\r\n  }\r\n\r\n  //For all unique categories, checks if there are any photos w/ uploadStatus: notUploaded\r\n  //If all photos are uploaded for a category, change category upload status.  Else do nothing\r\n  checkCategoryUploadStatus = async (categoriesArray) => {\r\n    for(let i = 0; i<categoriesArray.length; i++){\r\n      try{\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${categoriesArray[i]}`;\r\n          })\r\n          .count();\r\n          //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n        if(localCatPhotosCount === 0){\r\n          //Update status\r\n          //console.log('success');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'success', this.props.pictureReq);\r\n        }\r\n        else{\r\n          //console.log('fail');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'fail', this.props.pictureReq);\r\n        }\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Set photo uploadStatus to 'uploaded'\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Get category uploadStatus\r\n  /*\r\n  getStatus = (imageId) => {\r\n    return this.props.categories[imageId].catUploadStatus;\r\n  }\r\n  */\r\n\r\n\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.getLocalPhotos()} className=\"ui button positive\">Upload</button>\r\n        <Link to={`${this.props.currentJob}/categories`} className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to={`${this.props.currentJob}/categories`}/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Upload local photos'\r\n          content='Upload all photos that have not been uploaded yet?'\r\n          path={`${this.props.currentJob}/categories`}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  const currentJob = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJob].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    currentJob: currentJob,\r\n    pictureReq: currentPictureReqs\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(UploadAll);\r\n\r\nexport default connect(mapStateToProps, { updateCatUploadStatus })(toastManager);\r\n","/*\r\nJobList - Menu that shows current saved job sessions\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\n//import { osVersion } from 'react-device-detect';\r\n\r\nimport { setCurrentJob, updateJobColor } from '../../actions';\r\nimport db from '../../database/db';\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\n\r\n\r\nclass JobList extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n\r\n  };\r\n\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    try{\r\n      if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n        console.log('entered redirect');\r\n        this.setState({ toSignin: true });\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(\"get State error: \",e)\r\n      //re-direct to SignIn\r\n      this.setState({ toSignin: true });\r\n    }\r\n\r\n\r\n    //console.log('this is osVersion: ',osVersion);\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    try{\r\n      for(let i=0; i<this.props.sessionData.length; i++){\r\n        this.checkForPhotoCompletion(this.props.sessionData[i].id);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  checkForPhotoCompletion = async (jobId) => {\r\n    //loop through all existinh job tables and check for any 'norUploaded' photos\r\n    try{\r\n      const uploadedPhotosCount = await db.table(jobId)\r\n        .where('uploadStatus').equals('notUploaded').count();\r\n      const jobPhotosCount = await db.table(jobId).count();\r\n        //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n      if(uploadedPhotosCount === 0 & jobPhotosCount !== 0){\r\n        //all uploaded, go green\r\n        console.log('Green', jobId);\r\n        this.props.updateJobColor(jobId,`rgba(75, 225, 75, 0.2)`);\r\n      }\r\n      else if(uploadedPhotosCount !== 0){\r\n        //some remaining, go red\r\n        this.props.updateJobColor(jobId,`rgba(225, 75, 75, 0.2)`);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  onJobClick = async (jobId) => {\r\n    //console.log('This is job Id: ',jobId);\r\n    await this.props.setCurrentJob(jobId);\r\n    await this.setState({ toCategories: true, jobId: jobId });\r\n    //console.log('jobId: ',this.state.jobId);\r\n  }\r\n\r\n  onDeleteClick = async (jobId) => {\r\n    await this.props.setCurrentJob(jobId);\r\n    this.setState({ toDelete: true, jobId: jobId });\r\n  }\r\n\r\n  renderList(){\r\n    if(this.props.sessionData){\r\n      //console.log('joblist session data: ',this.props.sessionData);\r\n      return this.props.sessionData.map( job => {\r\n        return(\r\n          <div className='item' key={job.id} style={{\r\n            backgroundColor: `${job.color}` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <button className=\"ui negative button\" onClick={() => {this.onDeleteClick(job.id)}}>Delete</button>\r\n            </div>\r\n            <div onClick={() => {this.onJobClick(job.id)}}>\r\n              {job.projectName}\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to={'/delete'} />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    try{\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <div className=\"item\" key='warning' style={{ visibility: this.props.sessionData.length === 10 ? 'visible' : 'hidden' }}>\r\n              Limit 10 jobs.  Delete jobs to make space.\r\n            </div>\r\n            <Link to='/newjob' className=\"item\" key='newJob' style={{ visibility: this.props.sessionData.length === 10 ? 'hidden' : 'visible' }}>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    catch (e){\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <Link to='/newjob' className=\"item\" key='newJob'>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  //Check if there are existing jobs.  If not, let joblist be blank\r\n  //_.compact removed undefined values from jobs\r\n  try{\r\n    return{\r\n      userName: state.userData,\r\n      sessionData: _.compact(Object.values(state.sessions.entities.jobs))\r\n    };\r\n  }\r\n  catch (e){\r\n    //console.log(e);\r\n    return{\r\n      userName: state.userData,\r\n    };\r\n  }\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(JobList);\r\n\r\nexport default connect(mapStateToProps, { setCurrentJob, updateJobColor })(toastManager);\r\n","/*\r\nSignIn - First menu.  User inputs their username\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { setUsername } from '../../actions';\r\n\r\nimport InputForm from '../InputForm';\r\n\r\nconst userValidation = value => (value && value.length > 3 ? `You must enter a User Name (Max 3 characters)` : undefined)\r\n\r\nclass SignIn extends React.Component{\r\n\r\n  state = { toJobList: false, toSignIn: false };\r\n\r\n  componentDidMount(){\r\n    //if localStorage exists, redirect to /joblist\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"sessions\":{}`) & !localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n        console.log('going to joblist');\r\n        this.setState({ toJobList: true });\r\n      }\r\n    }\r\n    catch(e){\r\n      //If there's no local storage, best to start back from SignIn.  I think.\r\n      console.log('localStorage check failed: ',e);\r\n\r\n    }\r\n\r\n    /*\r\n    else if (!localStorage.getItem(\"state\").includes(`signIn`)){\r\n      //localStorage has old architecture, delete localStorage\r\n      localStorage.clear();\r\n    }\r\n    */\r\n  }\r\n\r\n  onSubmit = (formValues) => {\r\n    formValues.userName = formValues.userName.toUpperCase();\r\n    //console.log('Clicked: ',formValues);\r\n    this.props.setUsername(formValues.userName);\r\n    this.setState({ toJobList: true });\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toJobList){\r\n      return <Redirect to='/joblist' />\r\n    }\r\n\r\n\r\n    return(\r\n      <div>\r\n        <h1 style={{ textAlign: 'center' }}>SolarPix 2.0</h1>\r\n        <h4 style={{ textAlign: 'center' }}>Please Sign In with your Initials</h4>\r\n        <InputForm  initialValues={{ key: 'signIn' }} onSubmit={this.onSubmit} fields={\r\n          [\r\n            {\r\n            name: 'userName',\r\n            label: 'User Initials',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            }\r\n          ]\r\n        }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default connect(null, { setUsername })(SignIn);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//import { connect } from 'react-redux';\r\n//import { uploadAllPhotos, updateUploadStatus, setUsername } from '../actions';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n//import NetworkDetector from '../HOCs/NetworkDetector';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\nimport UploadAll from './pages/UploadAll';\r\nimport JobList from './pages/JobList';\r\nimport SignIn from './pages/SignIn';\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n/*\r\n  if(!props.isDisconnected && props.uploadStatus !== 'uploading'){\r\n    //console.log('You have no network connection', props);\r\n    props.updateUploadStatus('uploading');\r\n    props.uploadAllPhotos();\r\n  }\r\n  else if(props.isDisconnected && props.uploadStatus === 'uploading'){\r\n    props.updateUploadStatus('');\r\n  }\r\n*/\r\n\r\n//console.log('ayylmao');\r\n  render(){\r\n    try{\r\n      return (\r\n        <ToastProvider>\r\n          <p>v{process.env.REACT_APP_VERSION}</p>\r\n          {/* <button className=\"ui button\" onClick={() => toSignin(props) }>Click here to delete userName</button> */}\r\n          <div className=\"ui container\" >\r\n            <HashRouter>\r\n              <div>\r\n                <Route path=\"/newjob\" exact component={CreateJob}/>\r\n                <Route path=\"/:job/categories\" exact component={CategoryList}/>\r\n                <Route path=\"/:job/categories/:id\" exact component={CategoryEdit}/>\r\n                <Route path=\"/delete\" exact component={DeleteJob}/>\r\n                <Route path=\"/upload\" exact component={UploadAll}/>\r\n                <Route path=\"/joblist\" exact component={JobList}/>\r\n                <Route path=\"/\" exact component={SignIn}/>\r\n              </div>\r\n            </HashRouter>\r\n          </div>\r\n        </ToastProvider>\r\n      );\r\n    }\r\n    catch(e){\r\n      //Something went wrong with Service Worker upgrade, show clear cache button/indexeddb options\r\n      console.log('Router broken: ',e);\r\n      return(\r\n        <div>If you're seeing this message, screenshot this page and send this error message to IT:\r\n          <div>{e}</div>\r\n        </div>\r\n\r\n\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//Dev function\r\n/*\r\nconst toSignin = (props) => {\r\n  console.log(\"entering toSignin \", props);\r\n  props.setUsername({});\r\n}\r\n*/\r\n\r\n/*\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    uploadStatus: state.uploadStatus,\r\n    userData: state.userData\r\n  }\r\n}\r\n*/\r\n\r\n//const networkDetector = NetworkDetector(App);\r\n\r\nexport default App;\r\n//export default App;\r\n","import { SET_CURRENTJOB, SET_JOBCOUNTER } from '../actions/types'\r\n\r\nconst initialState = {\r\n  currentJob: '',\r\n  jobCounter: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type){\r\n    case SET_CURRENTJOB:\r\n      return { ...state, currentJob: action.payload };\r\n\r\n    case SET_JOBCOUNTER:\r\n      const newCount = state.jobCounter + action.payload;\r\n      return { ...state, jobCounter: newCount };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { UPLOAD_ALLIMAGES_STATUS } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case UPLOAD_ALLIMAGES_STATUS:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport userReducer from './userReducer';\r\nimport jobReducer from './jobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport pageLocationReducer from './pageLocationReducer';\r\nimport currentJobReducer from './currentJobReducer';\r\nimport uploadStatusReducer from './uploadStatusReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  uploadStatus: uploadStatusReducer,\r\n  userData: userReducer,\r\n  jobMeta: currentJobReducer,\r\n  categoryData: categoriesReducer,\r\n  sessions: jobReducer,\r\n  form: formReducer,\r\n  pageLocation: pageLocationReducer\r\n})\r\n\r\n/*\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'DELETE_JOB'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n*/\r\n\r\n//export default rootReducer;\r\nexport default appReducer;\r\n","import { SET_USERNAME } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SET_USERNAME:\r\n\r\n      //return { ...state, action.payload };\r\n\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    /*\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      return { ...state, [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        catUploadStatus: action.payload.status\r\n        }\r\n      };\r\n    */\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//import { CREATE_JOBLIST, ADD_JOB } from '../actions/types'\r\n//import _ from 'lodash'\r\nimport {\r\n  CREATE_JOBLIST,\r\n  ADD_JOB,\r\n  DELETE_JOB,\r\n  UPDATE_PHOTOQTY,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  UPDATE_JOBCOLOR\r\n } from '../actions/types'\r\n//import { normalize } from 'normalizr';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOBLIST:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n      //return { ...state };\r\n      //return { ...state, ..._.mapKeys(action.payload, 'id') }\r\n    case UPDATE_PHOTOQTY:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].photoQty = action.payload.photoQty;\r\n      return newState;\r\n\r\n    case DELETE_JOB:\r\n      //Do I even need to do this w/ lodash?\r\n      newState = { ...state };\r\n      /*\r\n      Doesn't work for some reason.  Supposed to completely remove from object\r\n      _.omit(newState.entities.jobs, action.payload.jobId);\r\n      _.omit(newState.entities.pictureReqs, action.payload.pictureReq);\r\n      */\r\n      newState.entities.jobs[action.payload.jobId] = undefined;\r\n      newState.entities.pictureReqs[action.payload.pictureReq] = undefined;\r\n      return newState;\r\n\r\n    case ADD_JOB:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId] = action.payload.jobData;\r\n      newState.entities.pictureReqs[action.payload.pictureReqId] = action.payload.pictureReqData;\r\n      return newState;\r\n\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].catUploadStatus = action.payload.status;\r\n      return newState;\r\n\r\n    case UPDATE_JOBCOLOR:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId].color = action.payload.color;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SAVE_PAGELOCATION\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SAVE_PAGELOCATION:\r\n      return { ...state, yValue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      //onupdatefound, listens for statechange event; fired if installing property acquires a new service worker\r\n      registration.onupdatefound = () => {\r\n        //installing, returns a service worker whose .state property is installing\r\n        const installingWorker = registration.installing;\r\n        //If there's no service worker, exit\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        //onstatechange, fired anytime .state property changes\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import Dexie from 'dexie';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    userData: store.getState().userData,\r\n    sessions: store.getState().sessions,\r\n    jobMeta: store.getState().jobMeta,\r\n    db: store.getState().db\r\n    //categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n\r\nserviceWorker.register();\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n\r\n\r\n//Paste this command into console to check localStorage size.\r\n/*\r\nvar _lsTotal=0,_xLen,_x;for(_x in localStorage){ if(!localStorage.hasOwnProperty(_x)){continue;} _xLen= ((localStorage[_x].length + _x.length)* 2);_lsTotal+=_xLen; console.log(_x.substr(0,50)+\" = \"+ (_xLen/1024).toFixed(2)+\" KB\")};console.log(\"Total = \" + (_lsTotal / 1024).toFixed(2) + \" KB\");\r\n*/\r\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.c5af7465.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.1ad94596.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_salessv.7af64a19.bin\";"],"sourceRoot":""}