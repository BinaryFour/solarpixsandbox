{"version":3,"sources":["apis/files.js","schemas/schemas.js","database/db.js","HOCs/NetworkDetector.js","apis/uploadImage.js","actions/index.js","actions/types.js","components/InputForm.js","components/pages/CreateJob.js","components/Footer.js","components/pages/CategoryList.js","components/CameraComp.js","components/Modal.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/pages/UploadAll.js","components/pages/JobList.js","components/pages/SignIn.js","components/App.js","reducers/currentJobReducer.js","reducers/index.js","reducers/uploadStatusReducer.js","reducers/userReducer.js","reducers/categoriesReducer.js","reducers/jobReducer.js","reducers/pageLocationReducer.js","serviceWorker.js","index.js","localStorage.js","categoryListFile_install","categoryListFile_pcsv","categoryListFile_salessv"],"names":["axios","create","baseURL","pictureReq","schema","Entity","job","pictureReqs","db","Dexie","version","stores","job1","job2","job3","job4","job5","job6","job7","job8","job9","job0","ComposedComponent","uploadImage","image","config","auth","username","password","crossDomain","formData","FormData","append","files","post","setJobCounter","increment","type","payload","setCurrentJob","jobId","setUsername","userName","updateCatUploadStatus","categoryId","status","photoReq","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","_this2","this","fields","map","field","Field","name","key","component","dropdown","validate","handleSubmit","renderList","React","Component","reduxForm","form","userValidation","undefined","CreateJob","state","toCategories","toDelete","toSignin","getOpenJobId","currentJobs","jobs","keys","length","i","_","findKey","id","_callee","projName","jobIdNum","regenerator_default","wrap","_context","prev","next","projectName","toUpperCase","localStorage","getItem","includes","createJobList","profileName","Number","isInteger","addNewJob","console","log","setState","currentJob","stop","Redirect","to","components_InputForm","initialValues","connect","jobMeta","counter","jobCounter","pickBy","sessions","entities","e","asyncToGenerator","mark","_callee3","dispatch","colormap","categoryArray","superCatArray","response","uniqueSuperCats","colorCount","colors","pictureReqId","_context4","require","t0","get","categoryListFile_install","sent","abrupt","categoryListFile_pcsv","categoryListFile_salessv","data","split","forEach","category","tempArray","obj","title","description","photoQty","catUploadStatus","push","toConsumableArray","Set","nshades","format","alpha","cellColor","parseInt","jobData","color","pictureReqData","categories","_x4","apply","arguments","_callee2","normalJobData","_context3","normalize","_x3","Footer","width","links","link","Link","path","style","classname","CategoryList","pageLocation","window","scrollTo","saveLocation","pageYOffset","backgroundColor","textAlign","success","fail","neutral","waiting","es_Redirect","display","height","components_Footer","ownProps","currentJobId","currentPictureReqs","userData","values","yValue","readTextFile","textFile","_ref4","_callee4","_context5","_x5","location","styles","CameraComp","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","stopPropagation","content","alt","src","marginBottom","actions","document","querySelector","CategoryEdit","_isMounted","testVar","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","showPermissionsMsg","os","osVersion","componentDidMount","isOpen","open","getThumbnails","srcToFile","res","_context2","fetch","arrayBuffer","countLocalPhotos","localCatPhotosCount","table","where","equals","and","result","photoId","count","onClickThumbnail","URL","createObjectURL","photo","uploadFile","_callee5","toastSettings","updateStatusTrue","onAddPhoto","_callee6","imgData","fileData","cameraChoice","timeStamp","renamedFile","_context6","Math","floor","Date","now","process","File","saveToDb","_callee7","img","_context7","add","fileName","uploadStatus","_callee8","_context8","update","_callee9","_context9","startsWith","toArray","updatePhotoQty","message","toastManager","appearance","autoDismiss","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","components_CameraComp","build_default","onTakePhoto","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","isImageMirror","imageCompression","isMaxResolution","onCameraError","withToastManager","getCategory","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","currentPictureReq","clear","deleteJob","currentJobCounter","UploadAll","getLocalPhotos","localPhotos","uploadFiles","successArray","failArray","photoCategory","_tempArray","uniqueSuccessCategories","uniqueFailCategories","checkCategoryUploadStatus","categoriesArray","_loop","delegateYield","JobList","checkForPhotoCompletion","uploadedPhotosCount","jobPhotosCount","updateJobColor","onJobClick","onDeleteClick","sessionData","visibility","compact","SignIn","toJobList","toSignIn","networkDetector","isDisconnected","updateUploadStatus","uploadAllPhotos","dist","HashRouter","Route","exact","_Component","NetworkDetector","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","handleConnectionChange","webPing","navigator","onLine","setInterval","mode","then","clearInterval","catch","inherits","createClass","addEventListener","removeEventListener","photoArray","uniqueSuccess","uniqueObjs","tables","j","photoData","k","x","JSON","stringify","parse","successUpload","_x","_x2","initialState","appReducer","combineReducers","action","objectSpread","newCount","categoryData","mapKeys","defineProperty","newState","formReducer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","persistedState","localState","err","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","setItem","setLocalStorage","render","es","components_App","href","origin","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4877671a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL: 'https://binaryfour.github.io/'\r\n})\r\n","import { schema } from 'normalizr';\r\n//Root category defined at bottom, after deepest object defined first.\r\n\r\n//Define a categories schema\r\nconst pictureReq = new schema.Entity('pictureReqs');\r\n\r\n//Define a job schema\r\nconst job = new schema.Entity('jobs', {\r\n  pictureReqs: pictureReq\r\n});\r\n\r\n//Define a job array\r\n\r\nexport { job };\r\n//const normalizedData = normalize(localStorage.state, job);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\n\r\ndb.version(3).stores({\r\n    job1: `photoId, uploadStatus`,\r\n    job2: `photoId, uploadStatus`,\r\n    job3: `photoId, uploadStatus`,\r\n    job4: `photoId, uploadStatus`,\r\n    job5: `photoId, uploadStatus`,\r\n    job6: `photoId, uploadStatus`,\r\n    job7: `photoId, uploadStatus`,\r\n    job8: `photoId, uploadStatus`,\r\n    job9: `photoId, uploadStatus`,\r\n    job0: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","/*\r\nhttps://www.codementor.io/nedson/a-guide-to-handling-internet-disconnection-in-react-applications-rs7u9zpwn\r\nThis component Code from this site\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\n//let isDisconnectedVar = false;\r\n\r\nexport default function (ComposedComponent) {\r\n  class NetworkDetector extends Component {\r\n    state = {\r\n      isDisconnected: false\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.handleConnectionChange();\r\n      window.addEventListener('online', this.handleConnectionChange);\r\n      window.addEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener('online', this.handleConnectionChange);\r\n      window.removeEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n\r\n    handleConnectionChange = async () => {\r\n      const condition = navigator.onLine ? 'online' : 'offline';\r\n      if (condition === 'online') {\r\n        const webPing = setInterval(\r\n          () => {\r\n            fetch('//google.com', {\r\n              mode: 'no-cors',\r\n              })\r\n            .then(() => {\r\n              this.setState({ isDisconnected: false }\r\n                , () => {\r\n                return clearInterval(webPing)\r\n              });\r\n            }).catch(() => this.setState({ isDisconnected: true }) )\r\n          }, 2000);\r\n        return;\r\n      }\r\n\r\n      return this.setState({ isDisconnected: true });\r\n    }\r\n\r\n    render() {\r\n      //return <ComposedComponent {...this.props}  isDisconnected={this.state.isDisconnected} />;\r\n\r\n      const { isDisconnected } = this.state;\r\n      return (\r\n        <div>\r\n          { isDisconnected && (<div className='ui block center aligned header' style={{ backgroundColor: 'orange' }}>\r\n              <p>Offline Mode (Pics will upload when network is restored)</p>\r\n            </div>)\r\n          }\r\n          <ComposedComponent {...this.props} isDisconnected={this.state.isDisconnected}/>\r\n        </div>\r\n      );\r\n\r\n    }\r\n  }\r\n\r\n  return NetworkDetector;\r\n}\r\n","import files from '../apis/files';\r\n\r\n//import axiosRetry from 'axios-retry';\r\n\r\nconst uploadImage = (image) => {\r\n\r\n  //axios retry for exponential back-off\r\n  //axiosRetry(files, { retryDelay: axiosRetry.exponentialDelay });\r\n\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  return files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n  //return axiosRetry(files)\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","import files from '../apis/files';\r\nimport categoryListFile_install from '../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../categoryListFile_pcsv';\r\nimport categoryListFile_salessv from '../categoryListFile_salessv';\r\nimport { normalize } from 'normalizr';\r\nimport { job } from '../schemas/schemas';\r\nimport db from '../database/db';\r\nimport uploadImage from '../apis/uploadImage';\r\n\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  ADD_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPDATE_PHOTOQTY,\r\n  DELETE_JOB,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  SAVE_PAGELOCATION,\r\n  SET_USERNAME,\r\n  CREATE_JOBLIST,\r\n  SET_CURRENTJOB,\r\n  SET_JOBCOUNTER,\r\n  UPLOAD_ALLIMAGES,\r\n  UPLOAD_ALLIMAGES_STATUS,\r\n  UPDATE_JOBCOLOR\r\n} from './types';\r\n\r\n\r\nexport const updateJobColor = (job, color) => {\r\n\r\n  return {\r\n    type: UPDATE_JOBCOLOR,\r\n    payload: {\r\n      color: color,\r\n      jobId: job\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUploadStatus = (status) => {\r\n\r\n  return {\r\n    type: UPLOAD_ALLIMAGES_STATUS,\r\n    payload: status\r\n  }\r\n}\r\n\r\n/*\r\nGet all photos that are not uploaded,\r\nfor loop upload them all.  On success, update the db entry and the category uploadStatus for the photo\r\n\r\n*/\r\nexport const uploadAllPhotos = () => async (dispatch, getState) => {\r\n\r\n  console.log('entered uploadAllPhotos');\r\n  if(!db.isOpen()){\r\n    db.open();\r\n  }\r\n  let photoArray = [];\r\n  let successArray = [];\r\n  let failArray = [];\r\n  let uniqueSuccess = [];\r\n  let uniqueObjs = [];\r\n  //See if there are photos w/ \"notUploaded\" status\r\n  //const photosToUpload = await db.table().where('uploadStatus').equals('notUploaded').toArray();\r\n  const tables = db.tables;\r\n  for(let i=0; i<tables.length; i++){\r\n    const tempArray = await db.table(tables[i].name).where('uploadStatus').equals('notUploaded').toArray();\r\n    photoArray = photoArray.concat(tempArray);\r\n  }\r\n  //console.log('This is photoArray: ', photoArray, photoArray.length);\r\n  //photoArray now has all photos\r\n  if(photoArray.length !== 0){\r\n    //begin automatic upload\r\n    for(let j=0; j<photoArray.length; j++){\r\n      const photoData = photoArray[j];\r\n      try{\r\n        //Upload photo, update db status\r\n        dispatch(updateCatUploadStatus(photoData.photoId[0], 'waiting', photoData.pictureReq));\r\n        await uploadImage(photoData.photo);\r\n        await db.table(photoData.job).update(photoData.photoId, { uploadStatus: 'uploaded' });\r\n        successArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        //updateCatUploadStatus(categoryId, 'success', photoData.pictureReq);\r\n\r\n      }\r\n      catch (e){\r\n        failArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        console.log(e);\r\n      }\r\n    }\r\n    console.log('successArray', successArray, 'failArray', failArray);\r\n    //After for loop finishes, Get all unique uploads and update all category upload icons (code from CategoryEdit)\r\n    try{\r\n      uniqueSuccess = [...new Set(successArray.map(x => JSON.stringify(x)))];\r\n      uniqueObjs = [...new Set(uniqueSuccess.map(x => JSON.parse(x)))];\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n\r\n    console.log('uniqueObjs', uniqueObjs);\r\n    for(let k=0; k<uniqueObjs.length; k++){\r\n      const successUpload = uniqueObjs[k];\r\n      let status = 'neutral';\r\n\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(successUpload.job)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${successUpload.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        dispatch(updateCatUploadStatus(successUpload.categoryId, status, successUpload.pictureReq));\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n      }\r\n    }\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n  else{\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n\r\n\r\n\r\n  dispatch({ type: UPLOAD_ALLIMAGES, payload:  0 });\r\n\r\n}\r\n\r\nexport const setJobCounter = (increment) => {\r\n\r\n  return{\r\n    type: SET_JOBCOUNTER,\r\n    payload: increment\r\n  }\r\n}\r\n\r\nexport const setCurrentJob = (jobId) => {\r\n\r\n  return{\r\n    type: SET_CURRENTJOB,\r\n    payload: jobId\r\n  }\r\n}\r\n\r\nexport const setUsername = (userName) => {\r\n  return{\r\n    type: SET_USERNAME,\r\n    payload: userName\r\n  }\r\n}\r\n\r\n//Saves window page y so that users return to the same location on categoryList page\r\nexport const saveLocation = (location) => {\r\n\r\n  return{\r\n    type: SAVE_PAGELOCATION,\r\n    payload: location\r\n  }\r\n}\r\n\r\n//Sets category property 'uploadStatus'.  Used to show unique icon\r\nexport const updateCatUploadStatus = (categoryId, status, photoReq) => {\r\n\r\n  return{\r\n    type: UPDATE_CATUPLOADSTATUS,\r\n    payload: {\r\n      status: status,\r\n      categoryId: categoryId,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//Delete job, pictureReqs for jobId (db table deleted in DeleteJob component)\r\nexport const deleteJob = (jobId, pictureReq) => {\r\n  //window.localStorage.clear();\r\n  //\r\n\r\n  return{\r\n    type: DELETE_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReq: pictureReq\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n*/\r\n\r\nexport const updatePhotoQty = (categoryId, photoQty, photoReq) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      categoryId: categoryId,\r\n      photoQty: photoQty,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n1.  Create object array using text file based on profileName\r\n2.  For every superCategory, add a unique color to all categories\r\n3.  Create normalized object to put into store (job -> photoReqs)\r\n*/\r\n\r\n//TODO:  Perform steps 1 & 2 once for all unique profileNames, then store the data in the store(?) for future use\r\nexport const createJobList = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  //Color spectrum minimum is 11 colors (Package)\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: {\r\n        id: pictureReqId, jobId: jobId, categories: categoryArray\r\n      },\r\n    color: ''\r\n  }\r\n\r\n  const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: CREATE_JOBLIST,\r\n    payload: normalJobData\r\n  })\r\n/*\r\n\r\n  return{\r\n    type: CREATE_JOBLIST,\r\n    payload:\r\n      { [initialJobId]:\r\n        {\r\n          id: initialJobId,\r\n          projectName: projectName,\r\n          profileName: profileName\r\n        }\r\n      }\r\n  }\r\n*/\r\n}\r\n\r\n//Submit button saves NewJob data\r\nexport const addNewJob = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: pictureReqId,\r\n    color: ''\r\n  }\r\n\r\n  const pictureReqData = {\r\n    id: pictureReqId,\r\n    jobId: jobId,\r\n    categories: categoryArray\r\n  }\r\n\r\n  //const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: ADD_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReqId: pictureReqId,\r\n      jobData: jobData,\r\n      pictureReqData: pictureReqData\r\n    }\r\n  })\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\n\r\n\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    let colormap = require('colormap');\r\n\r\n    var categoryArray = [];\r\n    var superCatArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n        categoryArray.push(obj);\r\n        superCatArray.push(obj.title[0]);\r\n        counter += 1;\r\n      }\r\n    });\r\n\r\n    //Assigning unique colors for each supercategory\r\n    const uniqueSuperCats = [...new Set(superCatArray)];\r\n    let colorCount = 11\r\n    if(uniqueSuperCats.length > 11){\r\n      colorCount = uniqueSuperCats.length;\r\n    }\r\n    let colors = colormap({\r\n      colormap: 'hsv',\r\n      nshades: colorCount,\r\n      format: 'rgba',\r\n      alpha: 0.2\r\n    })\r\n    //console.log(colors)\r\n\r\n    categoryArray.forEach( category => {\r\n      category.cellColor = colors[parseInt(category.title[0])];\r\n    });\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  //console.log(getState());\r\n  const currentJobId = getState().currentJob;\r\n  const currentPictureReqs = getState().sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  const category = getState().sessions.entities.pictureReqs[currentPictureReqs].categories[id];\r\n  //const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const ADD_JOB = 'ADD_JOB';\r\nexport const CREATE_JOBLIST = 'CREATE_JOBLIST';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\nexport const UPDATE_CATUPLOADSTATUS = 'UPDATE_CATUPLOADSTATUS';\r\nexport const SAVE_PAGELOCATION = 'SAVE_PAGELOCATION';\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\nexport const SET_CURRENTJOB = 'SET_CURRENTJOB';\r\nexport const SET_JOBCOUNTER = 'SET_JOBCOUNTER';\r\nexport const REFRESH_STORE = 'REFRESH_STORE';\r\nexport const UPLOAD_ALLIMAGES = 'UPLOAD_ALLIMAGES';\r\nexport const UPLOAD_ALLIMAGES_STATUS = 'UPLOAD_ALLIMAGES_STATUS';\r\nexport const UPDATE_JOBCOLOR = 'UPDATE_JOBCOLOR';\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"install\">Install</option>\r\n          <option value=\"pcsv\">PCSV</option>\r\n          <option value=\"salessv\">Sales SV</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    //console.log('Input form onSubmit: ',formValues);\r\n    this.props.onSubmit(formValues);\r\n\r\n  }\r\n\r\n\r\n\r\n  //render dynamic field list\r\n  renderList(){\r\n    return this.props.fields.map( field => {\r\n      return(\r\n        <Field name={field.name} label={field.label} key={field.key} component=\r\n        {{\r\n          input: this.renderInput,\r\n          dropdown: this.renderDropdown\r\n        }[field.component]}\r\n        validate={field.validate}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    //console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <br/>\r\n        <button className=\"fluid ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  /*\r\n  render(){\r\n    console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  */\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\n\r\n/*\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  //console.log(formValues.profileName);\r\n\r\n  if (!formValues.userName || formValues.userName.length > 3){\r\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n*/\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm'\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { addNewJob, createJobList, setCurrentJob, setJobCounter } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\n//import database from '../../database/db';\r\n\r\nconst userValidation = value => (!value ? 'You must enter a Project Name' : undefined)\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n  }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('entered redirect');\r\n      this.setState({ toSignin: true });\r\n    }\r\n    //console.log(this.props.jobs);\r\n    /*\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n    */\r\n  }\r\n\r\n  /*\r\n  createNewDb = async (jobId) => {\r\n    try{\r\n      if(!db.isOpen()){\r\n        await db.open();\r\n      }\r\n      db.close();\r\n      console.log('dbVerNo: ',db.verno, ' dbVerNo+1: ',db.verno+1);\r\n      await db.version(db.verno+1).stores({\r\n          [jobId]: `photoId, uploadStatus`\r\n      });\r\n      db.open();\r\n\r\n    }\r\n    catch(e){\r\n      console.log('db creation failed', e);\r\n    }\r\n  }\r\n  */\r\n\r\n  /*\r\n  createDb = (jobId) => {\r\n    const dataBase = new Dexie('empowerDb');\r\n\r\n    this.props.createDatabase(dataBase);\r\n\r\n    const db = this.props.db;\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n\r\n  createDbTable = (jobId) => {\r\n    const db = this.props.db;\r\n    if(db.isOpen()){\r\n      db.close();\r\n    }\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n  */\r\n  getOpenJobId = () => {\r\n    const currentJobs = this.props.jobs;\r\n    if(Object.keys(this.props.jobs).length >= 10){\r\n      return null;\r\n    }\r\n    else{\r\n      //Find an available jobId slot (starting from 0, asc);\r\n      for(var i=0; i<10; i++){\r\n        if(!_.findKey(currentJobs, { id: `job${i}` })){\r\n            //console.log(`should be the first non-existing jobId`);\r\n            return i;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list (Set userName to capitals)\r\n  onSubmit = async (formValues) => {\r\n    const projName = formValues.projectName.toUpperCase();\r\n    //If there are no current jobs, create jobList w/ normalized data\r\n    if(localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\r\n      await this.props.createJobList(projName, formValues.profileName, 0);\r\n      await this.props.setCurrentJob(`job0`);\r\n    }\r\n    //Otherwise, create a new job and merge data w/ store\r\n    else{\r\n      const jobIdNum = this.getOpenJobId();\r\n      //console.log(jobIdNum);\r\n      if(Number.isInteger(jobIdNum)){\r\n        await this.props.addNewJob(projName, formValues.profileName, jobIdNum);\r\n        await this.props.setCurrentJob(`job${jobIdNum}`);\r\n      }\r\n      else{\r\n        //prevent user from creating another job\r\n        console.log('There are already 10 jobs');\r\n      }\r\n    }\r\n    //this.props.setJobCounter(1);\r\n    //this.createNewDb(this.props.currentJob);\r\n\r\n\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true, jobId: this.props.currentJob });\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to='/delete' />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>New Job</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install' }}\r\n        fields={\r\n          [\r\n            {\r\n            name: 'projectName',\r\n            label: 'Project Name (try to use one word, all use same)',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            },\r\n            {\r\n            name: 'profileName',\r\n            label: 'Profile',\r\n            component: 'dropdown',\r\n            key: 'field2'\r\n            }\r\n          ]\r\n        }\r\n        //TODO: pass down field information\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n      jobs: _.pickBy(state.sessions.entities.jobs, undefined),\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log('jobs dont exist yet');\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { addNewJob, createJobList, setCurrentJob, setJobCounter })(CreateJob);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    //determine width of each button based on number of buttons\r\n    const width = `${100/this.props.links.length}%`;\r\n\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id} style={{ width: width }}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return(\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\n//import categoryListFile_install from '../../categoryListFile_install';\r\n//import categoryListFile_pcsv from '../../categoryListFile_pcsv';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { readTextFile, saveLocation } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n//import offline from 'offline-js';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/joblist', id: 'jobList', label: 'Back' },\r\n  { path: '/upload', id: 'uploadAll', label: 'Upload All' }\r\n]\r\n\r\n//Used for deciding which icon to show for category Upload status\r\n//const catUploadStatuses =\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  state = {\r\n    toSignin: false\r\n  }\r\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\r\n  //Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      this.setState({toSignin: true});\r\n    }\r\n    //console.log(this.props.sessions);\r\n    //If there is a saved page location, send user back to that position\r\n    if(this.props.pageLocation){\r\n      window.scrollTo(0, this.props.pageLocation);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    //save page position\r\n    //console.log('Y offset ', window.pageYOffset);\r\n    this.props.saveLocation(window.pageYOffset);\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  //change icons based on catUploadStatus\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <Link to={`categories/${category.id}`} className=\"item\" key={category.id} style={{ backgroundColor:\r\n          `rgba(${category.cellColor[0]},${category.cellColor[1]},${category.cellColor[2]},${category.cellColor[3]})` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <div className=\"description\">\r\n                Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          {{\r\n            success: <i className='large middle aligned inverted green check icon'></i>,\r\n            fail: <i className='large middle aligned inverted red x icon'></i>,\r\n            neutral: <i className='large middle aligned inverted gray minus icon'></i>,\r\n            waiting: <i className='large middle aligned cog loading icon'></i>\r\n          }[category.catUploadStatus]}\r\n          <div className=\"content\" >\r\n            <div className=\"header\">{category.title}</div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    if(this.state.toSignin){\r\n      return(\r\n        <Redirect to='/' />\r\n      );\r\n    }\r\n\r\n    return(\r\n        <div>\r\n          <h2>Category List: {this.props.job.projectName}</h2>\r\n          <div className=\"ui celled list\" >{this.renderList()}</div>\r\n          <div className=\"padding\" style={{ display: 'block', height: '48px' }}></div>\r\n          <Footer links={links}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    userName: state.userData,\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    categories: Object.values(state.sessions.entities.pictureReqs[currentPictureReqs].categories),\r\n    pageLocation: state.pageLocation.yValue,\r\n\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile, saveLocation })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass CameraComp extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui fluid labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui fluid button large primary\" htmlFor=\"file\">Use Camera App</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CameraComp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\nimport { osVersion } from 'react-device-detect';\r\n\r\nimport db from '../../database/db';\r\nimport CameraComp from '../CameraComp';\r\nimport Footer from '../Footer';\r\nimport Modal from '../Modal';\r\n\r\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\n//import detectConnection from '../detectConnection';\r\n\r\n//USED to be used for footer lol\r\n/*\r\nconst links = [\r\n  { path: `/categories`, id:'categoryList', label: 'Back' }\r\n];\r\n*/\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none',\r\n    showPermissionsMsg: false,\r\n    os: osVersion\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount = async () =>{\r\n    //Set _isMounted var to true for potential unmount\r\n    this._isMounted = true;\r\n\r\n    //If the database isn't open, open it and get thumbnails\r\n    if(!db.isOpen()){\r\n      await db.open();\r\n    }\r\n    this.getThumbnails();\r\n\r\n    //If Camera permission is denied, tell user to enable camera permissions\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  //Update state w/ uploadStatus: unsent:fail, sentAll:success, default:neutral\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.countLocalPhotos();\r\n  }\r\n\r\n/*\r\nCamera Methods\r\n*/\r\n  onCameraError(error) {\r\n    console.log('This is the camera Error: ',error);\r\n    this.setState({ showPermissionsMsg: true });\r\n  }\r\n\r\n//https://stackoverflow.com/questions/6850276/how-to-convert-dataurl-to-file-object-in-javascript\r\n  //load src and convert to a File instance object\r\n  //work for any type of src, not only image src.\r\n  //return a promise that resolves with a File instance\r\n\r\n  srcToFile = async (src) => {\r\n    console.log('entered srcToFile');\r\n    try{\r\n      const res = await fetch(src);\r\n      console.log('this is res: ', res);\r\n      return res.arrayBuffer();\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n/*\r\nEdit Methods\r\n*/\r\n\r\n  //Counts the amount of not-Uploaded photos in this category.  Sets store value\r\n  countLocalPhotos = async () => {\r\n    //console.log('Entered countLocalPhotos');\r\n    const photoQty = this.props.category.photoQty;\r\n\r\n    //If there are no photos, do nothing\r\n    if (photoQty !== 0){\r\n      let status = 'neutral';\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${this.state.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        this.props.updateCatUploadStatus(this.state.categoryId, status, this.props.job.pictureReqs);\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n\r\n      }\r\n    }\r\n    //console.log('localCatPhotosCount', localCatPhotosCount);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({ showModal: '', image: image.photo, showImage: showImage, imageId: image.photoId });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image/state.imageId\r\n  uploadFile = async () => {\r\n    const imageId = this.state.imageId;\r\n    const image = this.state.image;\r\n    await this.setState({\r\n              showModal: 'none',\r\n              image: {},\r\n              showImage: '',\r\n              imageId: ''\r\n            })\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    try{\r\n      await uploadImage(image);\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name\r\n  //Embedded Camera\r\n  onAddPhoto = async (imgData) => {\r\n    //Check if imgData is string or object\r\n    //console.log('this is typeof: ',typeof imgData);\r\n    let fileData = imgData;\r\n    let cameraChoice = 'N';\r\n\r\n    //If using embedded Camera\r\n    if(typeof imgData == \"string\"){\r\n      fileData = await this.srcToFile(imgData);\r\n      cameraChoice = 'E';\r\n    }\r\n\r\n    //console.log('this is arrBuffer: ', arrBuffer);\r\n    const job = this.props.job;\r\n    const userName = this.props.userName;\r\n    const timeStamp = Math.floor(Date.now() / 1000);\r\n\r\n    const imageQty = this.state.imageQty + 1;\r\n    //TODO: Add several things to title: iOS vers, App vers, which camera was used\r\n    //aV: App Version, os: iOS version, cA: Camera used (E: Embedded, N: Native)\r\n    const imageTitle = `${job.projectName}-${job.profileName}_${this.props.category.title}-${imageQty}_${userName}-av${process.env.REACT_APP_VERSION}-os${this.state.os}-ca${cameraChoice}`;\r\n    const imageId = `${this.state.categoryId}_${timeStamp}`;\r\n    //Set current imageId to lastmodified date and rename file\r\n      const renamedFile = new File([fileData], imageTitle+'.jpeg', {type: 'image/jpeg'} );\r\n\r\n    console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n    await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n    //Save file to db, upload photo to server, refresh current page w/ thumbnails\r\n    try{\r\n      //If saveToDb fails, notify user w/ error code.\r\n      this.saveToDb(renamedFile);\r\n      this.getThumbnails();\r\n    }catch(error){\r\n      this.toastSettings(`Screenshot this and send to your dev ${error}`, 'error');\r\n    }\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n\r\n    try{\r\n      //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n      await uploadImage(renamedFile);\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n      //This causes issues if component unmounts.  Illegal setState\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Saves image to db\r\n  saveToDb = async (img) => {\r\n    try{\r\n      await db.table(this.props.currentJob).add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: 'notUploaded', photo: img, job:this.props.currentJob, pictureReq: this.props.job.pictureReqs });\r\n    }\r\n    catch(error){\r\n      this.toastSettings(`Screenshot this and send to your dev ${error}`, 'error');\r\n    }\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    let thumbnails = [];\r\n    let photoQty = 0;\r\n    const categoryId = this.state.categoryId;\r\n    try{\r\n      thumbnails = await db.table(this.props.currentJob).where('photoId').startsWith(`${categoryId}_`).toArray();\r\n      photoQty = thumbnails.length;\r\n      //console.log('no error');\r\n    }\r\n    catch (e){\r\n      console.log('No Photos', e);\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    this.props.updatePhotoQty(categoryId, photoQty, this.props.job.pictureReqs);\r\n    this.setState({ imageQty: photoQty, thumbnails: thumbnails });\r\n    //console.log(this.state.thumbnails);\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus === 'uploaded' ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <h4 style={this.state.showPermissionsMsg ? {} : {display: 'none'}}>You must allow access to the Camera.  If you denied the permission, please go to your chrome settings and enable the Camera permission for this site</h4>\r\n        <div>\r\n          <CameraComp onSubmit = {this.onAddPhoto} />\r\n          <Camera\r\n            onTakePhoto = { (imgData) => { this.onAddPhoto(imgData); } }\r\n            idealFacingMode = {FACING_MODES.ENVIRONMENT}\r\n            imageType = {IMAGE_TYPES.JPG}\r\n            isImageMirror = {false}\r\n            imageCompression  = {0.0}\r\n            isMaxResolution = {true}\r\n            onCameraError = { (error) => { this.onCameraError(error); } }\r\n          />\r\n          <h3>Photos: {this.state.imageQty}</h3>\r\n          <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n        <Footer links={[\r\n          { path: `/${this.props.currentJob}/categories`, id:'categoryList', label: 'Back' }\r\n        ]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n  //console.log(state.sessions.entities.pictureReqs[currentPictureReqs].categories);\r\n  //console.log(ownProps.match.params.id);\r\n\r\n  return{\r\n    category: state.sessions.entities.pictureReqs[currentPictureReqs].categories[ownProps.match.params.id],\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    userName: state.userData,\r\n    currentJob: currentJobId\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { deleteJob, setJobCounter, setCurrentJob } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    const jobId = this.props.currentJobId;\r\n    const pictureReq = this.props.currentPictureReq;\r\n    //console.log(jobId, pictureReq);\r\n    try{\r\n      db.table(jobId).clear();\r\n      this.props.setCurrentJob('');\r\n      await this.props.deleteJob(jobId, pictureReq);\r\n    }\r\n    catch (e){\r\n      console.log('Table did not clear',e);\r\n    }\r\n\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={async () => await this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    /*\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    */\r\n  }\r\n\r\n  render(){\r\n    //console.log(this.state);\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title={`Delete Job: ${this.props.currentJob.projectName}`}\r\n          content='Please ensure all photos are uploaded for this job.  You will lose all the photos for this job.'\r\n          path='/joblist'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    if(state.jobMeta.currentJob){\r\n      const currentJobId = state.jobMeta.currentJob;\r\n      const currentJobCounter = state.jobMeta.jobCounter;\r\n      const currentJob = state.sessions.entities.jobs[currentJobId];\r\n      const currentPictureReq = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n      return{\r\n        currentJobId: currentJobId,\r\n        currentJobCounter: currentJobCounter,\r\n        currentJob: currentJob,\r\n        currentPictureReq: currentPictureReq\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        currentJobId: '',\r\n        currentJobCounter: '',\r\n        currentJob: '',\r\n        currentPictureReq: ''\r\n      }\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log(e);\r\n    //Should only be re-direct requests after a delete\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteJob, setJobCounter, setCurrentJob })(DeleteJob);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { updateCatUploadStatus } from '../../actions';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\nimport db from '../../database/db';\r\n\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nclass UploadAll extends React.Component {\r\n\r\n  state = { cancel: false }\r\n\r\n  /*\r\n  Upload all photos whose uploadStatus is \"False\"\r\n  1.  Get all photos from db whose uploadStatus is \"False\"\r\n  2.  For loop upload all of them\r\n\r\n  Notes:\r\n  Show single notification for all uploads.  Show single notification for error, show all failed filenames (eh)\r\n  */\r\n\r\n  //Get photos w/ uploadStatus: notUploaded\r\n  //call uploadFiles\r\n  getLocalPhotos = async () => {\r\n    const localPhotos = await db.table(this.props.currentJob).where('uploadStatus').equals('notUploaded').toArray();\r\n    //console.log('This is localPhotos: ', localPhotos, localPhotos.length);\r\n    if(localPhotos.length !== 0){\r\n      this.uploadFiles(localPhotos);\r\n    }\r\n    else{\r\n      this.toastSettings(`No photos to Upload!`, 'warning');\r\n      this.setState({ cancel: true });\r\n    }\r\n    //this.setState({ toPath: true });\r\n  }\r\n\r\n  //Upload all files\r\n  uploadFiles = async (localPhotos) => {\r\n\r\n    //re-direct back to category list\r\n    this.setState({ cancel: true });\r\n\r\n    let successArray = [];\r\n    let failArray = [];\r\n    this.toastSettings(`Uploading Files...`, 'info');\r\n\r\n    //for all local photos, try to upload each individually.  Add successes to successArray, failures to failArray\r\n    for(let i = 0; i<localPhotos.length; i++){\r\n      try{\r\n        //Set spinner for category to show user that upload is in progress\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        const photoCategory = tempArray[0];\r\n        this.props.updateCatUploadStatus(photoCategory, 'waiting', this.props.pictureReq );\r\n\r\n\r\n        await uploadImage(localPhotos[i].photo);\r\n        //Get categoryID from photo, add it to successArray\r\n        this.updateStatusTrue(localPhotos[i].photoId);\r\n        successArray.push(photoCategory);\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        failArray.push(tempArray[0]);\r\n        //console.log('this is failArray: ',failArray);\r\n      }\r\n    }\r\n\r\n    //console.log(`SuccessArray: ${successArray} \\nFailArray: ${failArray}`);\r\n    //if there were successful uploads, check if there are any notUploaded photos in category and adjust uploadStatus accordingly\r\n    if(successArray.length !== 0){\r\n      this.toastSettings(`Uploaded images!`, 'success');\r\n      //Only unique Categories\r\n      const uniqueSuccessCategories = [...new Set(successArray)];\r\n      this.checkCategoryUploadStatus(uniqueSuccessCategories);\r\n      //console.log(uniqueCategories);\r\n    }\r\n    if (failArray.length !== 0){\r\n      this.toastSettings(`Some images failed`, 'error');\r\n      const uniqueFailCategories = [...new Set(failArray)];\r\n      this.checkCategoryUploadStatus(uniqueFailCategories);\r\n    }\r\n  }\r\n\r\n  //For all unique categories, checks if there are any photos w/ uploadStatus: notUploaded\r\n  //If all photos are uploaded for a category, change category upload status.  Else do nothing\r\n  checkCategoryUploadStatus = async (categoriesArray) => {\r\n    for(let i = 0; i<categoriesArray.length; i++){\r\n      try{\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${categoriesArray[i]}`;\r\n          })\r\n          .count();\r\n          //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n        if(localCatPhotosCount === 0){\r\n          //Update status\r\n          //console.log('success');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'success', this.props.pictureReq);\r\n        }\r\n        else{\r\n          //console.log('fail');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'fail', this.props.pictureReq);\r\n        }\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Set photo uploadStatus to 'uploaded'\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Get category uploadStatus\r\n  /*\r\n  getStatus = (imageId) => {\r\n    return this.props.categories[imageId].catUploadStatus;\r\n  }\r\n  */\r\n\r\n\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.getLocalPhotos()} className=\"ui button positive\">Upload</button>\r\n        <Link to={`${this.props.currentJob}/categories`} className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to={`${this.props.currentJob}/categories`}/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Upload local photos'\r\n          content='Upload all photos that have not been uploaded yet?'\r\n          path={`${this.props.currentJob}/categories`}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  const currentJob = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJob].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    currentJob: currentJob,\r\n    pictureReq: currentPictureReqs\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(UploadAll);\r\n\r\nexport default connect(mapStateToProps, { updateCatUploadStatus })(toastManager);\r\n","/*\r\nJobList - Menu that shows current saved job sessions\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\n//import { osVersion } from 'react-device-detect';\r\n\r\nimport { setCurrentJob, updateJobColor } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\n\r\nclass JobList extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n\r\n  };\r\n\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('entered redirect');\r\n      this.setState({ toSignin: true });\r\n    }\r\n\r\n    //console.log('this is osVersion: ',osVersion);\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    try{\r\n      for(let i=0; i<this.props.sessionData.length; i++){\r\n        this.checkForPhotoCompletion(this.props.sessionData[i].id);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  checkForPhotoCompletion = async (jobId) => {\r\n    //loop through all existinh job tables and check for any 'norUploaded' photos\r\n    try{\r\n      const uploadedPhotosCount = await db.table(jobId)\r\n        .where('uploadStatus').equals('notUploaded').count();\r\n      const jobPhotosCount = await db.table(jobId).count();\r\n        //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n      if(uploadedPhotosCount === 0 & jobPhotosCount !== 0){\r\n        //all uploaded, go green\r\n        console.log('Green', jobId);\r\n        this.props.updateJobColor(jobId,`rgba(75, 225, 75, 0.2)`);\r\n      }\r\n      else if(uploadedPhotosCount !== 0){\r\n        //some remaining, go red\r\n        this.props.updateJobColor(jobId,`rgba(225, 75, 75, 0.2)`);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  onJobClick = async (jobId) => {\r\n    //console.log('This is job Id: ',jobId);\r\n    await this.props.setCurrentJob(jobId);\r\n    await this.setState({ toCategories: true, jobId: jobId });\r\n    //console.log('jobId: ',this.state.jobId);\r\n  }\r\n\r\n  onDeleteClick = async (jobId) => {\r\n    await this.props.setCurrentJob(jobId);\r\n    this.setState({ toDelete: true, jobId: jobId });\r\n  }\r\n\r\n  renderList(){\r\n    if(this.props.sessionData){\r\n      //console.log('joblist session data: ',this.props.sessionData);\r\n      return this.props.sessionData.map( job => {\r\n        return(\r\n          <div className='item' key={job.id} style={{\r\n            backgroundColor: `${job.color}` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <button className=\"ui negative button\" onClick={() => {this.onDeleteClick(job.id)}}>Delete</button>\r\n            </div>\r\n            <div onClick={() => {this.onJobClick(job.id)}}>\r\n              {job.projectName}\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to={'/delete'} />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    try{\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <div className=\"item\" key='warning' style={{ visibility: this.props.sessionData.length === 10 ? 'visible' : 'hidden' }}>\r\n              Limit 10 jobs.  Delete jobs to make space.\r\n            </div>\r\n            <Link to='/newjob' className=\"item\" key='newJob' style={{ visibility: this.props.sessionData.length === 10 ? 'hidden' : 'visible' }}>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    catch (e){\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <Link to='/newjob' className=\"item\" key='newJob'>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  //Check if there are existing jobs.  If not, let joblist be blank\r\n  //_.compact removed undefined values from jobs\r\n  try{\r\n    return{\r\n      userName: state.userData,\r\n      sessionData: _.compact(Object.values(state.sessions.entities.jobs))\r\n    };\r\n  }\r\n  catch (e){\r\n    //console.log(e);\r\n    return{\r\n      userName: state.userData,\r\n    };\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setCurrentJob, updateJobColor })(JobList);\r\n","/*\r\nSignIn - First menu.  User inputs their username\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { setUsername } from '../../actions';\r\n\r\nimport InputForm from '../InputForm';\r\n\r\nconst userValidation = value => (value && value.length > 3 ? `You must enter a User Name (Max 3 characters)` : undefined)\r\n\r\nclass SignIn extends React.Component{\r\n\r\n  state = { toJobList: false, toSignIn: false };\r\n\r\n  componentDidMount(){\r\n    //if localStorage exists, redirect to /joblist\r\n    if(!localStorage.getItem(\"state\").includes(`\"sessions\":{}`) & !localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('going to joblist');\r\n      this.setState({ toJobList: true });\r\n    }\r\n    else if (!localStorage.getItem(\"state\").includes(`signIn`)){\r\n      //localStorage has old architecture, delete localStorage\r\n      localStorage.clear();\r\n    }\r\n  }\r\n\r\n  onSubmit = (formValues) => {\r\n    formValues.userName = formValues.userName.toUpperCase();\r\n    //console.log('Clicked: ',formValues);\r\n    this.props.setUsername(formValues.userName);\r\n    this.setState({ toJobList: true });\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toJobList){\r\n      return <Redirect to='/joblist' />\r\n    }\r\n\r\n\r\n    return(\r\n      <div>\r\n        <h1 style={{ textAlign: 'center' }}>SolarPix 2.0</h1>\r\n        <h4 style={{ textAlign: 'center' }}>Please Sign In with your Initials</h4>\r\n        <InputForm  initialValues={{ key: 'signIn' }} onSubmit={this.onSubmit} fields={\r\n          [\r\n            {\r\n            name: 'userName',\r\n            label: 'User Initials',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            }\r\n          ]\r\n        }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default connect(null, { setUsername })(SignIn);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { uploadAllPhotos, updateUploadStatus, setUsername } from '../actions';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\nimport NetworkDetector from '../HOCs/NetworkDetector';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\nimport UploadAll from './pages/UploadAll';\r\nimport JobList from './pages/JobList';\r\nimport SignIn from './pages/SignIn';\r\n\r\n\r\n\r\nconst App = (props) => {\r\n\r\n  if(!props.isDisconnected && props.uploadStatus !== 'uploading'){\r\n    //console.log('You have no network connection', props);\r\n    props.updateUploadStatus('uploading');\r\n    props.uploadAllPhotos();\r\n  }\r\n  else if(props.isDisconnected && props.uploadStatus === 'uploading'){\r\n    props.updateUploadStatus('');\r\n  }\r\n\r\n//console.log('ayylmao');\r\n  return (\r\n    <ToastProvider>\r\n      <p>v{process.env.REACT_APP_VERSION}</p>\r\n      {/* <button className=\"ui button\" onClick={() => toSignin(props) }>Click here to delete userName</button> */}\r\n      <div className=\"ui container\" >\r\n        <HashRouter>\r\n          <div>\r\n            <Route path=\"/newjob\" exact component={CreateJob}/>\r\n            <Route path=\"/:job/categories\" exact component={CategoryList}/>\r\n            <Route path=\"/:job/categories/:id\" exact component={CategoryEdit}/>\r\n            <Route path=\"/delete\" exact component={DeleteJob}/>\r\n            <Route path=\"/upload\" exact component={UploadAll}/>\r\n            <Route path=\"/joblist\" exact component={JobList}/>\r\n            <Route path=\"/\" exact component={SignIn}/>\r\n          </div>\r\n        </HashRouter>\r\n      </div>\r\n    </ToastProvider>\r\n  );\r\n}\r\n\r\n//Dev function\r\n/*\r\nconst toSignin = (props) => {\r\n  console.log(\"entering toSignin \", props);\r\n  props.setUsername({});\r\n}\r\n*/\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    uploadStatus: state.uploadStatus,\r\n    userData: state.userData\r\n  }\r\n}\r\n\r\nconst networkDetector = NetworkDetector(App);\r\n\r\nexport default connect(mapStateToProps, { uploadAllPhotos, updateUploadStatus, setUsername })(networkDetector);\r\n//export default App;\r\n","import { SET_CURRENTJOB, SET_JOBCOUNTER } from '../actions/types'\r\n\r\nconst initialState = {\r\n  currentJob: '',\r\n  jobCounter: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type){\r\n    case SET_CURRENTJOB:\r\n      return { ...state, currentJob: action.payload };\r\n\r\n    case SET_JOBCOUNTER:\r\n      const newCount = state.jobCounter + action.payload;\r\n      return { ...state, jobCounter: newCount };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport userReducer from './userReducer';\r\nimport jobReducer from './jobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport pageLocationReducer from './pageLocationReducer';\r\nimport currentJobReducer from './currentJobReducer';\r\nimport uploadStatusReducer from './uploadStatusReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  uploadStatus: uploadStatusReducer,\r\n  userData: userReducer,\r\n  jobMeta: currentJobReducer,\r\n  categoryData: categoriesReducer,\r\n  sessions: jobReducer,\r\n  form: formReducer,\r\n  pageLocation: pageLocationReducer\r\n})\r\n\r\n/*\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'DELETE_JOB'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n*/\r\n\r\n//export default rootReducer;\r\nexport default appReducer;\r\n","import { UPLOAD_ALLIMAGES_STATUS } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case UPLOAD_ALLIMAGES_STATUS:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_USERNAME } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SET_USERNAME:\r\n\r\n      //return { ...state, action.payload };\r\n\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    /*\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      return { ...state, [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        catUploadStatus: action.payload.status\r\n        }\r\n      };\r\n    */\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//import { CREATE_JOBLIST, ADD_JOB } from '../actions/types'\r\n//import _ from 'lodash'\r\nimport {\r\n  CREATE_JOBLIST,\r\n  ADD_JOB,\r\n  DELETE_JOB,\r\n  UPDATE_PHOTOQTY,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  UPDATE_JOBCOLOR\r\n } from '../actions/types'\r\n//import { normalize } from 'normalizr';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOBLIST:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n      //return { ...state };\r\n      //return { ...state, ..._.mapKeys(action.payload, 'id') }\r\n    case UPDATE_PHOTOQTY:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].photoQty = action.payload.photoQty;\r\n      return newState;\r\n\r\n    case DELETE_JOB:\r\n      //Do I even need to do this w/ lodash?\r\n      newState = { ...state };\r\n      /*\r\n      Doesn't work for some reason.  Supposed to completely remove from object\r\n      _.omit(newState.entities.jobs, action.payload.jobId);\r\n      _.omit(newState.entities.pictureReqs, action.payload.pictureReq);\r\n      */\r\n      newState.entities.jobs[action.payload.jobId] = undefined;\r\n      newState.entities.pictureReqs[action.payload.pictureReq] = undefined;\r\n      return newState;\r\n\r\n    case ADD_JOB:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId] = action.payload.jobData;\r\n      newState.entities.pictureReqs[action.payload.pictureReqId] = action.payload.pictureReqData;\r\n      return newState;\r\n\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].catUploadStatus = action.payload.status;\r\n      return newState;\r\n\r\n    case UPDATE_JOBCOLOR:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId].color = action.payload.color;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SAVE_PAGELOCATION\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SAVE_PAGELOCATION:\r\n      return { ...state, yValue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      //onupdatefound, listens for statechange event; fired if installing property acquires a new service worker\r\n      registration.onupdatefound = () => {\r\n        //installing, returns a service worker whose .state property is installing\r\n        const installingWorker = registration.installing;\r\n        //If there's no service worker, exit\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        //onstatechange, fired anytime .state property changes\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import Dexie from 'dexie';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    userData: store.getState().userData,\r\n    sessions: store.getState().sessions,\r\n    jobMeta: store.getState().jobMeta,\r\n    db: store.getState().db\r\n    //categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n\r\nserviceWorker.register();\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n\r\n\r\n//Paste this command into console to check localStorage size.\r\n/*\r\nvar _lsTotal=0,_xLen,_x;for(_x in localStorage){ if(!localStorage.hasOwnProperty(_x)){continue;} _xLen= ((localStorage[_x].length + _x.length)* 2);_lsTotal+=_xLen; console.log(_x.substr(0,50)+\" = \"+ (_xLen/1024).toFixed(2)+\" KB\")};console.log(\"Total = \" + (_lsTotal / 1024).toFixed(2) + \" KB\");\r\n*/\r\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.c5af7465.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.1ad94596.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_salessv.f15da299.bin\";"],"sourceRoot":""}