{"version":3,"sources":["apis/files.js","schemas/schemas.js","database/db.js","HOCs/NetworkDetector.js","apis/uploadImage.js","actions/index.js","actions/types.js","components/InputForm.js","components/pages/CreateJob.js","components/Footer.js","components/pages/CategoryList.js","components/CameraComp.js","components/Modal.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/pages/UploadAll.js","components/pages/JobList.js","components/pages/SignIn.js","components/App.js","reducers/currentJobReducer.js","reducers/index.js","reducers/uploadStatusReducer.js","reducers/userReducer.js","reducers/categoriesReducer.js","reducers/jobReducer.js","reducers/pageLocationReducer.js","serviceWorker.js","index.js","localStorage.js","categoryListFile_install","categoryListFile_pcsv","categoryListFile_salessv"],"names":["axios","create","baseURL","pictureReq","schema","Entity","job","pictureReqs","db","Dexie","version","stores","job1","job2","job3","job4","job5","job6","job7","job8","job9","job0","ComposedComponent","uploadImage","image","config","auth","username","password","crossDomain","formData","FormData","append","files","post","setJobCounter","increment","type","payload","setCurrentJob","jobId","updateCatUploadStatus","categoryId","status","photoReq","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","_this2","this","fields","map","field","Field","name","key","component","dropdown","validate","handleSubmit","renderList","React","Component","reduxForm","form","userValidation","undefined","CreateJob","state","toCategories","toDelete","getOpenJobId","currentJobs","jobs","keys","length","i","_","findKey","id","_callee","projName","jobIdNum","regenerator_default","wrap","_context","prev","next","projectName","toUpperCase","localStorage","getItem","includes","createJobList","profileName","Number","isInteger","addNewJob","console","log","setState","currentJob","stop","Redirect","to","components_InputForm","initialValues","connect","jobMeta","counter","jobCounter","pickBy","sessions","entities","e","asyncToGenerator","mark","_callee3","dispatch","colormap","categoryArray","superCatArray","response","uniqueSuperCats","colorCount","colors","pictureReqId","_context4","require","t0","get","categoryListFile_install","sent","abrupt","categoryListFile_pcsv","categoryListFile_salessv","data","split","forEach","category","tempArray","obj","title","description","photoQty","catUploadStatus","push","toConsumableArray","Set","nshades","format","alpha","cellColor","parseInt","jobData","color","pictureReqData","categories","_x4","apply","arguments","_callee2","normalJobData","_context3","normalize","_x3","Footer","width","links","link","Link","path","style","classname","CategoryList","pageLocation","window","scrollTo","saveLocation","pageYOffset","backgroundColor","textAlign","success","fail","neutral","waiting","display","height","components_Footer","ownProps","currentJobId","currentPictureReqs","userName","userData","values","yValue","readTextFile","textFile","_ref4","_callee4","_context5","_x5","location","styles","CameraComp","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","stopPropagation","content","alt","src","marginBottom","actions","document","querySelector","CategoryEdit","_isMounted","testVar","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","showPermissionsMsg","componentDidMount","isOpen","open","getThumbnails","srcToBlob","res","_context2","fetch","toastSettings","url","blob","countLocalPhotos","localCatPhotosCount","table","where","equals","and","result","photoId","count","onClickThumbnail","URL","createObjectURL","photo","uploadFile","_callee5","updateStatusTrue","onAddPhoto","_callee6","dataUri","timeStamp","renamedFile","_context6","Math","floor","Date","now","File","saveToDb","_callee7","img","_context7","add","fileName","uploadStatus","_callee8","_context8","update","_callee9","_context9","startsWith","toArray","updatePhotoQty","message","toastManager","appearance","autoDismiss","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","build_default","onTakePhoto","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","isImageMirror","onCameraError","components_CameraComp","withToastManager","getCategory","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","currentPictureReq","clear","deleteJob","es_Redirect","currentJobCounter","UploadAll","getLocalPhotos","localPhotos","uploadFiles","successArray","failArray","photoCategory","_tempArray","uniqueSuccessCategories","uniqueFailCategories","checkCategoryUploadStatus","categoriesArray","_loop","delegateYield","JobList","checkForPhotoCompletion","uploadedPhotosCount","jobPhotosCount","updateJobColor","onJobClick","onDeleteClick","sessionData","visibility","compact","SignIn","toJobList","setUsername","networkDetector","isDisconnected","updateUploadStatus","uploadAllPhotos","dist","process","HashRouter","Route","exact","_Component","NetworkDetector","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","handleConnectionChange","webPing","navigator","onLine","setInterval","mode","then","clearInterval","catch","inherits","createClass","addEventListener","removeEventListener","photoArray","uniqueSuccess","uniqueObjs","tables","j","photoData","k","x","JSON","stringify","parse","successUpload","_x","_x2","initialState","appReducer","combineReducers","action","objectSpread","newCount","categoryData","mapKeys","defineProperty","newState","formReducer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","persistedState","localState","err","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","setItem","setLocalStorage","render","es","components_App","href","origin","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3af6d21d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL: 'https://binaryfour.github.io/'\r\n})\r\n","import { schema } from 'normalizr';\r\n//Root category defined at bottom, after deepest object defined first.\r\n\r\n//Define a categories schema\r\nconst pictureReq = new schema.Entity('pictureReqs');\r\n\r\n//Define a job schema\r\nconst job = new schema.Entity('jobs', {\r\n  pictureReqs: pictureReq\r\n});\r\n\r\n//Define a job array\r\n\r\nexport { job };\r\n//const normalizedData = normalize(localStorage.state, job);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\n\r\ndb.version(3).stores({\r\n    job1: `photoId, uploadStatus`,\r\n    job2: `photoId, uploadStatus`,\r\n    job3: `photoId, uploadStatus`,\r\n    job4: `photoId, uploadStatus`,\r\n    job5: `photoId, uploadStatus`,\r\n    job6: `photoId, uploadStatus`,\r\n    job7: `photoId, uploadStatus`,\r\n    job8: `photoId, uploadStatus`,\r\n    job9: `photoId, uploadStatus`,\r\n    job0: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","/*\r\nhttps://www.codementor.io/nedson/a-guide-to-handling-internet-disconnection-in-react-applications-rs7u9zpwn\r\nThis component Code from this site\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\n//let isDisconnectedVar = false;\r\n\r\nexport default function (ComposedComponent) {\r\n  class NetworkDetector extends Component {\r\n    state = {\r\n      isDisconnected: false\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.handleConnectionChange();\r\n      window.addEventListener('online', this.handleConnectionChange);\r\n      window.addEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener('online', this.handleConnectionChange);\r\n      window.removeEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n\r\n    handleConnectionChange = async () => {\r\n      const condition = navigator.onLine ? 'online' : 'offline';\r\n      if (condition === 'online') {\r\n        const webPing = setInterval(\r\n          () => {\r\n            fetch('//google.com', {\r\n              mode: 'no-cors',\r\n              })\r\n            .then(() => {\r\n              this.setState({ isDisconnected: false }\r\n                , () => {\r\n                return clearInterval(webPing)\r\n              });\r\n            }).catch(() => this.setState({ isDisconnected: true }) )\r\n          }, 2000);\r\n        return;\r\n      }\r\n\r\n      return this.setState({ isDisconnected: true });\r\n    }\r\n\r\n    render() {\r\n      //return <ComposedComponent {...this.props}  isDisconnected={this.state.isDisconnected} />;\r\n\r\n      const { isDisconnected } = this.state;\r\n      return (\r\n        <div>\r\n          { isDisconnected && (<div className='ui block center aligned header' style={{ backgroundColor: 'orange' }}>\r\n              <p>Offline Mode (Pics will upload when network is restored)</p>\r\n            </div>)\r\n          }\r\n          <ComposedComponent {...this.props} isDisconnected={this.state.isDisconnected}/>\r\n        </div>\r\n      );\r\n\r\n    }\r\n  }\r\n\r\n  return NetworkDetector;\r\n}\r\n","import files from '../apis/files';\r\n\r\n//import axiosRetry from 'axios-retry';\r\n\r\nconst uploadImage = (image) => {\r\n\r\n  //axios retry for exponential back-off\r\n  //axiosRetry(files, { retryDelay: axiosRetry.exponentialDelay });\r\n\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  return files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n  //return axiosRetry(files)\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","import files from '../apis/files';\r\nimport categoryListFile_install from '../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../categoryListFile_pcsv';\r\nimport categoryListFile_salessv from '../categoryListFile_salessv';\r\nimport { normalize } from 'normalizr';\r\nimport { job } from '../schemas/schemas';\r\nimport db from '../database/db';\r\nimport uploadImage from '../apis/uploadImage';\r\n\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  ADD_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPDATE_PHOTOQTY,\r\n  DELETE_JOB,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  SAVE_PAGELOCATION,\r\n  SET_USERNAME,\r\n  CREATE_JOBLIST,\r\n  SET_CURRENTJOB,\r\n  SET_JOBCOUNTER,\r\n  UPLOAD_ALLIMAGES,\r\n  UPLOAD_ALLIMAGES_STATUS,\r\n  UPDATE_JOBCOLOR\r\n} from './types';\r\n\r\nexport const updateJobColor = (job, color) => {\r\n\r\n  return {\r\n    type: UPDATE_JOBCOLOR,\r\n    payload: {\r\n      color: color,\r\n      jobId: job\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUploadStatus = (status) => {\r\n\r\n  return {\r\n    type: UPLOAD_ALLIMAGES_STATUS,\r\n    payload: status\r\n  }\r\n}\r\n\r\n/*\r\nGet all photos that are not uploaded,\r\nfor loop upload them all.  On success, update the db entry and the category uploadStatus for the photo\r\n\r\n*/\r\nexport const uploadAllPhotos = () => async (dispatch, getState) => {\r\n\r\n  console.log('entered uploadAllPhotos');\r\n  if(!db.isOpen()){\r\n    db.open();\r\n  }\r\n  let photoArray = [];\r\n  let successArray = [];\r\n  let failArray = [];\r\n  let uniqueSuccess = [];\r\n  let uniqueObjs = [];\r\n  //See if there are photos w/ \"notUploaded\" status\r\n  //const photosToUpload = await db.table().where('uploadStatus').equals('notUploaded').toArray();\r\n  const tables = db.tables;\r\n  for(let i=0; i<tables.length; i++){\r\n    const tempArray = await db.table(tables[i].name).where('uploadStatus').equals('notUploaded').toArray();\r\n    photoArray = photoArray.concat(tempArray);\r\n  }\r\n  //console.log('This is photoArray: ', photoArray, photoArray.length);\r\n  //photoArray now has all photos\r\n  if(photoArray.length !== 0){\r\n    //begin automatic upload\r\n    for(let j=0; j<photoArray.length; j++){\r\n      const photoData = photoArray[j];\r\n      try{\r\n        //Upload photo, update db status\r\n        dispatch(updateCatUploadStatus(photoData.photoId[0], 'waiting', photoData.pictureReq));\r\n        await uploadImage(photoData.photo);\r\n        await db.table(photoData.job).update(photoData.photoId, { uploadStatus: 'uploaded' });\r\n        successArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        //updateCatUploadStatus(categoryId, 'success', photoData.pictureReq);\r\n\r\n      }\r\n      catch (e){\r\n        failArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        console.log(e);\r\n      }\r\n    }\r\n    console.log('successArray', successArray, 'failArray', failArray);\r\n    //After for loop finishes, Get all unique uploads and update all category upload icons (code from CategoryEdit)\r\n    try{\r\n      uniqueSuccess = [...new Set(successArray.map(x => JSON.stringify(x)))];\r\n      uniqueObjs = [...new Set(uniqueSuccess.map(x => JSON.parse(x)))];\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n\r\n    console.log('uniqueObjs', uniqueObjs);\r\n    for(let k=0; k<uniqueObjs.length; k++){\r\n      const successUpload = uniqueObjs[k];\r\n      let status = 'neutral';\r\n\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(successUpload.job)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${successUpload.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        dispatch(updateCatUploadStatus(successUpload.categoryId, status, successUpload.pictureReq));\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n      }\r\n    }\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n  else{\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n\r\n\r\n\r\n  dispatch({ type: UPLOAD_ALLIMAGES, payload:  0 });\r\n\r\n}\r\n\r\nexport const setJobCounter = (increment) => {\r\n\r\n  return{\r\n    type: SET_JOBCOUNTER,\r\n    payload: increment\r\n  }\r\n}\r\n\r\nexport const setCurrentJob = (jobId) => {\r\n\r\n  return{\r\n    type: SET_CURRENTJOB,\r\n    payload: jobId\r\n  }\r\n}\r\n\r\nexport const setUsername = (userName) => {\r\n  return{\r\n    type: SET_USERNAME,\r\n    payload: userName\r\n  }\r\n}\r\n\r\n//Saves window page y so that users return to the same location on categoryList page\r\nexport const saveLocation = (location) => {\r\n\r\n  return{\r\n    type: SAVE_PAGELOCATION,\r\n    payload: location\r\n  }\r\n}\r\n\r\n//Sets category property 'uploadStatus'.  Used to show unique icon\r\nexport const updateCatUploadStatus = (categoryId, status, photoReq) => {\r\n\r\n  return{\r\n    type: UPDATE_CATUPLOADSTATUS,\r\n    payload: {\r\n      status: status,\r\n      categoryId: categoryId,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//Delete job, pictureReqs for jobId (db table deleted in DeleteJob component)\r\nexport const deleteJob = (jobId, pictureReq) => {\r\n  //window.localStorage.clear();\r\n  //\r\n\r\n  return{\r\n    type: DELETE_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReq: pictureReq\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n*/\r\n\r\nexport const updatePhotoQty = (categoryId, photoQty, photoReq) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      categoryId: categoryId,\r\n      photoQty: photoQty,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n1.  Create object array using text file based on profileName\r\n2.  For every superCategory, add a unique color to all categories\r\n3.  Create normalized object to put into store (job -> photoReqs)\r\n*/\r\n\r\n//TODO:  Perform steps 1 & 2 once for all unique profileNames, then store the data in the store(?) for future use\r\nexport const createJobList = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  //Color spectrum minimum is 11 colors (Package)\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: {\r\n        id: pictureReqId, jobId: jobId, categories: categoryArray\r\n      },\r\n    color: ''\r\n  }\r\n\r\n  const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: CREATE_JOBLIST,\r\n    payload: normalJobData\r\n  })\r\n/*\r\n\r\n  return{\r\n    type: CREATE_JOBLIST,\r\n    payload:\r\n      { [initialJobId]:\r\n        {\r\n          id: initialJobId,\r\n          projectName: projectName,\r\n          profileName: profileName\r\n        }\r\n      }\r\n  }\r\n*/\r\n}\r\n\r\n//Submit button saves NewJob data\r\nexport const addNewJob = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: pictureReqId,\r\n    color: ''\r\n  }\r\n\r\n  const pictureReqData = {\r\n    id: pictureReqId,\r\n    jobId: jobId,\r\n    categories: categoryArray\r\n  }\r\n\r\n  //const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: ADD_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReqId: pictureReqId,\r\n      jobData: jobData,\r\n      pictureReqData: pictureReqData\r\n    }\r\n  })\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\n\r\n\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    let colormap = require('colormap');\r\n\r\n    var categoryArray = [];\r\n    var superCatArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n        categoryArray.push(obj);\r\n        superCatArray.push(obj.title[0]);\r\n        counter += 1;\r\n      }\r\n    });\r\n\r\n    //Assigning unique colors for each supercategory\r\n    const uniqueSuperCats = [...new Set(superCatArray)];\r\n    let colorCount = 11\r\n    if(uniqueSuperCats.length > 11){\r\n      colorCount = uniqueSuperCats.length;\r\n    }\r\n    let colors = colormap({\r\n      colormap: 'hsv',\r\n      nshades: colorCount,\r\n      format: 'rgba',\r\n      alpha: 0.2\r\n    })\r\n    //console.log(colors)\r\n\r\n    categoryArray.forEach( category => {\r\n      category.cellColor = colors[parseInt(category.title[0])];\r\n    });\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  //console.log(getState());\r\n  const currentJobId = getState().currentJob;\r\n  const currentPictureReqs = getState().sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  const category = getState().sessions.entities.pictureReqs[currentPictureReqs].categories[id];\r\n  //const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const ADD_JOB = 'ADD_JOB';\r\nexport const CREATE_JOBLIST = 'CREATE_JOBLIST';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\nexport const UPDATE_CATUPLOADSTATUS = 'UPDATE_CATUPLOADSTATUS';\r\nexport const SAVE_PAGELOCATION = 'SAVE_PAGELOCATION';\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\nexport const SET_CURRENTJOB = 'SET_CURRENTJOB';\r\nexport const SET_JOBCOUNTER = 'SET_JOBCOUNTER';\r\nexport const REFRESH_STORE = 'REFRESH_STORE';\r\nexport const UPLOAD_ALLIMAGES = 'UPLOAD_ALLIMAGES';\r\nexport const UPLOAD_ALLIMAGES_STATUS = 'UPLOAD_ALLIMAGES_STATUS';\r\nexport const UPDATE_JOBCOLOR = 'UPDATE_JOBCOLOR';\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"install\">Install</option>\r\n          <option value=\"pcsv\">PCSV</option>\r\n          <option value=\"salessv\">Sales SV</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    //console.log('Input form onSubmit: ',formValues);\r\n    this.props.onSubmit(formValues);\r\n\r\n  }\r\n\r\n\r\n\r\n  //render dynamic field list\r\n  renderList(){\r\n    return this.props.fields.map( field => {\r\n      return(\r\n        <Field name={field.name} label={field.label} key={field.key} component=\r\n        {{\r\n          input: this.renderInput,\r\n          dropdown: this.renderDropdown\r\n        }[field.component]}\r\n        validate={field.validate}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    //console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <br/>\r\n        <button className=\"fluid ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  /*\r\n  render(){\r\n    console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  */\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\n\r\n/*\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  //console.log(formValues.profileName);\r\n\r\n  if (!formValues.userName || formValues.userName.length > 3){\r\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n*/\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm'\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { addNewJob, createJobList, setCurrentJob, setJobCounter } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\n//import database from '../../database/db';\r\n\r\nconst userValidation = value => (!value ? 'You must enter a Project Name' : undefined)\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = { toCategories: false, toDelete: false, jobId: '' }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    //console.log(this.props.jobs);\r\n    /*\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n    */\r\n  }\r\n\r\n  /*\r\n  createNewDb = async (jobId) => {\r\n    try{\r\n      if(!db.isOpen()){\r\n        await db.open();\r\n      }\r\n      db.close();\r\n      console.log('dbVerNo: ',db.verno, ' dbVerNo+1: ',db.verno+1);\r\n      await db.version(db.verno+1).stores({\r\n          [jobId]: `photoId, uploadStatus`\r\n      });\r\n      db.open();\r\n\r\n    }\r\n    catch(e){\r\n      console.log('db creation failed', e);\r\n    }\r\n  }\r\n  */\r\n\r\n  /*\r\n  createDb = (jobId) => {\r\n    const dataBase = new Dexie('empowerDb');\r\n\r\n    this.props.createDatabase(dataBase);\r\n\r\n    const db = this.props.db;\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n\r\n  createDbTable = (jobId) => {\r\n    const db = this.props.db;\r\n    if(db.isOpen()){\r\n      db.close();\r\n    }\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n  */\r\n  getOpenJobId = () => {\r\n    const currentJobs = this.props.jobs;\r\n    if(Object.keys(this.props.jobs).length >= 10){\r\n      return null;\r\n    }\r\n    else{\r\n      //Find an available jobId slot (starting from 0, asc);\r\n      for(var i=0; i<10; i++){\r\n        if(!_.findKey(currentJobs, { id: `job${i}` })){\r\n            //console.log(`should be the first non-existing jobId`);\r\n            return i;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list (Set userName to capitals)\r\n  onSubmit = async (formValues) => {\r\n    const projName = formValues.projectName.toUpperCase();\r\n    //If there are no current jobs, create jobList w/ normalized data\r\n    if(localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\r\n      await this.props.createJobList(projName, formValues.profileName, 0);\r\n      await this.props.setCurrentJob(`job0`);\r\n    }\r\n    //Otherwise, create a new job and merge data w/ store\r\n    else{\r\n      const jobIdNum = this.getOpenJobId();\r\n      //console.log(jobIdNum);\r\n      if(Number.isInteger(jobIdNum)){\r\n        await this.props.addNewJob(projName, formValues.profileName, jobIdNum);\r\n        await this.props.setCurrentJob(`job${jobIdNum}`);\r\n      }\r\n      else{\r\n        //prevent user from creating another job\r\n        console.log('There are already 10 jobs');\r\n      }\r\n    }\r\n    //this.props.setJobCounter(1);\r\n    //this.createNewDb(this.props.currentJob);\r\n\r\n\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true, jobId: this.props.currentJob });\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories === true){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete === true){\r\n      return <Redirect to='/delete' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>New Job</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install' }}\r\n        fields={\r\n          [\r\n            {\r\n            name: 'projectName',\r\n            label: 'Project Name (try to use one word, all use same)',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            },\r\n            {\r\n            name: 'profileName',\r\n            label: 'Profile',\r\n            component: 'dropdown',\r\n            key: 'field2'\r\n            }\r\n          ]\r\n        }\r\n        //TODO: pass down field information\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n      jobs: _.pickBy(state.sessions.entities.jobs, undefined),\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log('jobs dont exist yet');\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { addNewJob, createJobList, setCurrentJob, setJobCounter })(CreateJob);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    //determine width of each button based on number of buttons\r\n    const width = `${100/this.props.links.length}%`;\r\n\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id} style={{ width: width }}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return(\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\n//import categoryListFile_install from '../../categoryListFile_install';\r\n//import categoryListFile_pcsv from '../../categoryListFile_pcsv';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { readTextFile, saveLocation } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n//import offline from 'offline-js';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/joblist', id: 'jobList', label: 'Back' },\r\n  { path: '/upload', id: 'uploadAll', label: 'Upload All' }\r\n]\r\n\r\n//Used for deciding which icon to show for category Upload status\r\n//const catUploadStatuses =\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\r\n  //Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    //console.log(this.props.sessions);\r\n    //If there is a saved page location, send user back to that position\r\n    if(this.props.pageLocation){\r\n      window.scrollTo(0, this.props.pageLocation);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    //save page position\r\n    //console.log('Y offset ', window.pageYOffset);\r\n    this.props.saveLocation(window.pageYOffset);\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  //change icons based on catUploadStatus\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <Link to={`categories/${category.id}`} className=\"item\" key={category.id} style={{ backgroundColor:\r\n          `rgba(${category.cellColor[0]},${category.cellColor[1]},${category.cellColor[2]},${category.cellColor[3]})` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <div className=\"description\">\r\n                Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          {{\r\n            success: <i className='large middle aligned inverted green check icon'></i>,\r\n            fail: <i className='large middle aligned inverted red x icon'></i>,\r\n            neutral: <i className='large middle aligned inverted gray minus icon'></i>,\r\n            waiting: <i className='large middle aligned cog loading icon'></i>\r\n          }[category.catUploadStatus]}\r\n          <div className=\"content\" >\r\n            <div className=\"header\">{category.title}</div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    return(\r\n        <div>\r\n          <h2>Category List: {this.props.job.projectName}</h2>\r\n          <div className=\"ui celled list\" >{this.renderList()}</div>\r\n          <div className=\"padding\" style={{ display: 'block', height: '48px' }}></div>\r\n          <Footer links={links}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    userName: state.userData,\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    categories: Object.values(state.sessions.entities.pictureReqs[currentPictureReqs].categories),\r\n    pageLocation: state.pageLocation.yValue,\r\n\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile, saveLocation })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass CameraComp extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui fluid labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui fluid button large primary\" htmlFor=\"file\">Take Photo</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CameraComp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nimport db from '../../database/db';\r\nimport CameraComp from '../CameraComp';\r\nimport Footer from '../Footer';\r\nimport Modal from '../Modal';\r\n\r\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\n//import detectConnection from '../detectConnection';\r\n\r\n//USED to be used for footer lol\r\n/*\r\nconst links = [\r\n  { path: `/categories`, id:'categoryList', label: 'Back' }\r\n];\r\n*/\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none',\r\n    showPermissionsMsg: false\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount = async () =>{\r\n    //Set _isMounted var to true for potential unmount\r\n    this._isMounted = true;\r\n\r\n    //If the database isn't open, open it and get thumbnails\r\n    if(!db.isOpen()){\r\n      await db.open();\r\n    }\r\n    this.getThumbnails();\r\n\r\n    //If Camera permission is denied, tell user to enable camera permissions\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  //Update state w/ uploadStatus: unsent:fail, sentAll:success, default:neutral\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.countLocalPhotos();\r\n  }\r\n\r\n/*\r\nCamera Methods\r\n*/\r\n  onCameraError(error) {\r\n    console.log('This is the camera Error: ',error);\r\n    this.setState({ showPermissionsMsg: true });\r\n  }\r\n\r\n//https://stackoverflow.com/questions/6850276/how-to-convert-dataurl-to-file-object-in-javascript\r\n  //load src and convert to a File instance object\r\n  //work for any type of src, not only image src.\r\n  //return a promise that resolves with a File instance\r\n\r\n  srcToBlob = async (src) => {\r\n    console.log('entered srcToBlob');\r\n    try{\r\n      const res = await fetch(src);\r\n      console.log('this is res: ', res);\r\n      this.toastSettings(`this is res ${res.url}`,'warning');\r\n      //ArrayBuffer may not work on certain iOS devices\r\n      //return res.arrayBuffer();\r\n      return res.blob();\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n/*\r\nEdit Methods\r\n*/\r\n\r\n  //Counts the amount of not-Uploaded photos in this category.  Sets store value\r\n  countLocalPhotos = async () => {\r\n    //console.log('Entered countLocalPhotos');\r\n    const photoQty = this.props.category.photoQty;\r\n\r\n    //If there are no photos, do nothing\r\n    if (photoQty !== 0){\r\n      let status = 'neutral';\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${this.state.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        this.props.updateCatUploadStatus(this.state.categoryId, status, this.props.job.pictureReqs);\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n\r\n      }\r\n    }\r\n    //console.log('localCatPhotosCount', localCatPhotosCount);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({ showModal: '', image: image.photo, showImage: showImage, imageId: image.photoId });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image/state.imageId\r\n  uploadFile = async () => {\r\n    const imageId = this.state.imageId;\r\n    const image = this.state.image;\r\n    await this.setState({\r\n              showModal: 'none',\r\n              image: {},\r\n              showImage: '',\r\n              imageId: ''\r\n            })\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    try{\r\n      await uploadImage(image);\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name\r\n  onAddPhoto = async (dataUri) => {\r\n    //const arrBuffer = await this.srcToFile(dataUri);\r\n    const blob = await this.srcToBlob(dataUri);\r\n\r\n    console.log('this is blob: ', blob);\r\n    this.toastSettings(`this is blob ${blob}`,'error');\r\n    const job = this.props.job;\r\n    const userName = this.props.userName;\r\n    const timeStamp = Math.floor(Date.now() / 1000);\r\n\r\n    const imageQty = this.state.imageQty + 1;\r\n    const imageTitle = `${job.projectName}-${job.profileName}_${this.props.category.title}-${imageQty}_${userName}`;\r\n    const imageId = `${this.state.categoryId}_${timeStamp}`;\r\n    //Set current imageId to lastmodified date and rename file\r\n    const renamedFile = new File([blob], imageTitle+'.jpeg', {type: 'image/jpeg'} );\r\n    console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n    await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n    //Save file to db, upload photo to server, refresh current page w/ thumbnails\r\n    try{\r\n      //If saveToDb fails, notify user w/ error code.\r\n      this.saveToDb(renamedFile);\r\n      this.getThumbnails();\r\n    }catch(error){\r\n      this.toastSettings(`Screenshot this and send to your dev ${error}`, 'error');\r\n    }\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n\r\n    try{\r\n      //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n      await uploadImage(renamedFile);\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n      //This causes issues if component unmounts.  Illegal setState\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Saves image to db\r\n  saveToDb = async (img) => {\r\n    await db.table(this.props.currentJob).add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: 'notUploaded', photo: img, job:this.props.currentJob, pictureReq: this.props.job.pictureReqs });\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    let thumbnails = [];\r\n    let photoQty = 0;\r\n    const categoryId = this.state.categoryId;\r\n    try{\r\n      thumbnails = await db.table(this.props.currentJob).where('photoId').startsWith(`${categoryId}_`).toArray();\r\n      photoQty = thumbnails.length;\r\n      //console.log('no error');\r\n    }\r\n    catch (e){\r\n      console.log('No Photos', e);\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    this.props.updatePhotoQty(categoryId, photoQty, this.props.job.pictureReqs);\r\n    this.setState({ imageQty: photoQty, thumbnails: thumbnails });\r\n    //console.log(this.state.thumbnails);\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus === 'uploaded' ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <h4 style={this.state.showPermissionsMsg ? {} : {display: 'none'}}>You must allow access to the Camera.  If you denied the permission, please go to your chrome settings and enable the Camera permission for this site</h4>\r\n        <div>\r\n          <Camera\r\n            onTakePhoto = { (dataUri) => { this.onAddPhoto(dataUri); } }\r\n            idealFacingMode = {FACING_MODES.ENVIRONMENT}\r\n            imageType = {IMAGE_TYPES.JPG}\r\n            isImageMirror = {false}\r\n            onCameraError = { (error) => { this.onCameraError(error); } }\r\n          />\r\n          <CameraComp onSubmit = {this.onAddPhoto} />\r\n          <h3>Photos: {this.state.imageQty}</h3>\r\n          <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n        <Footer links={[\r\n          { path: `/${this.props.currentJob}/categories`, id:'categoryList', label: 'Back' }\r\n        ]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n  //console.log(state.sessions.entities.pictureReqs[currentPictureReqs].categories);\r\n  //console.log(ownProps.match.params.id);\r\n\r\n  return{\r\n    category: state.sessions.entities.pictureReqs[currentPictureReqs].categories[ownProps.match.params.id],\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    userName: state.userData,\r\n    currentJob: currentJobId\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { deleteJob, setJobCounter, setCurrentJob } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    const jobId = this.props.currentJobId;\r\n    const pictureReq = this.props.currentPictureReq;\r\n    //console.log(jobId, pictureReq);\r\n    try{\r\n      db.table(jobId).clear();\r\n      this.props.setCurrentJob('');\r\n      await this.props.deleteJob(jobId, pictureReq);\r\n    }\r\n    catch (e){\r\n      console.log('Table did not clear',e);\r\n    }\r\n\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={async () => await this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    /*\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    */\r\n  }\r\n\r\n  render(){\r\n    //console.log(this.state);\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title={`Delete Job: ${this.props.currentJob.projectName}`}\r\n          content='Please ensure all photos are uploaded for this job.  You will lose all the photos for this job.'\r\n          path='/joblist'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    if(state.jobMeta.currentJob){\r\n      const currentJobId = state.jobMeta.currentJob;\r\n      const currentJobCounter = state.jobMeta.jobCounter;\r\n      const currentJob = state.sessions.entities.jobs[currentJobId];\r\n      const currentPictureReq = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n      return{\r\n        currentJobId: currentJobId,\r\n        currentJobCounter: currentJobCounter,\r\n        currentJob: currentJob,\r\n        currentPictureReq: currentPictureReq\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        currentJobId: '',\r\n        currentJobCounter: '',\r\n        currentJob: '',\r\n        currentPictureReq: ''\r\n      }\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log(e);\r\n    //Should only be re-direct requests after a delete\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteJob, setJobCounter, setCurrentJob })(DeleteJob);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { updateCatUploadStatus } from '../../actions';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\nimport db from '../../database/db';\r\n\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nclass UploadAll extends React.Component {\r\n\r\n  state = { cancel: false }\r\n\r\n  /*\r\n  Upload all photos whose uploadStatus is \"False\"\r\n  1.  Get all photos from db whose uploadStatus is \"False\"\r\n  2.  For loop upload all of them\r\n\r\n  Notes:\r\n  Show single notification for all uploads.  Show single notification for error, show all failed filenames (eh)\r\n  */\r\n\r\n  //Get photos w/ uploadStatus: notUploaded\r\n  //call uploadFiles\r\n  getLocalPhotos = async () => {\r\n    const localPhotos = await db.table(this.props.currentJob).where('uploadStatus').equals('notUploaded').toArray();\r\n    //console.log('This is localPhotos: ', localPhotos, localPhotos.length);\r\n    if(localPhotos.length !== 0){\r\n      this.uploadFiles(localPhotos);\r\n    }\r\n    else{\r\n      this.toastSettings(`No photos to Upload!`, 'warning');\r\n      this.setState({ cancel: true });\r\n    }\r\n    //this.setState({ toPath: true });\r\n  }\r\n\r\n  //Upload all files\r\n  uploadFiles = async (localPhotos) => {\r\n\r\n    //re-direct back to category list\r\n    this.setState({ cancel: true });\r\n\r\n    let successArray = [];\r\n    let failArray = [];\r\n    this.toastSettings(`Uploading Files...`, 'info');\r\n\r\n    //for all local photos, try to upload each individually.  Add successes to successArray, failures to failArray\r\n    for(let i = 0; i<localPhotos.length; i++){\r\n      try{\r\n        //Set spinner for category to show user that upload is in progress\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        const photoCategory = tempArray[0];\r\n        this.props.updateCatUploadStatus(photoCategory, 'waiting', this.props.pictureReq );\r\n\r\n\r\n        await uploadImage(localPhotos[i].photo);\r\n        //Get categoryID from photo, add it to successArray\r\n        this.updateStatusTrue(localPhotos[i].photoId);\r\n        successArray.push(photoCategory);\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        failArray.push(tempArray[0]);\r\n        //console.log('this is failArray: ',failArray);\r\n      }\r\n    }\r\n\r\n    //console.log(`SuccessArray: ${successArray} \\nFailArray: ${failArray}`);\r\n    //if there were successful uploads, check if there are any notUploaded photos in category and adjust uploadStatus accordingly\r\n    if(successArray.length !== 0){\r\n      this.toastSettings(`Uploaded images!`, 'success');\r\n      //Only unique Categories\r\n      const uniqueSuccessCategories = [...new Set(successArray)];\r\n      this.checkCategoryUploadStatus(uniqueSuccessCategories);\r\n      //console.log(uniqueCategories);\r\n    }\r\n    if (failArray.length !== 0){\r\n      this.toastSettings(`Some images failed`, 'error');\r\n      const uniqueFailCategories = [...new Set(failArray)];\r\n      this.checkCategoryUploadStatus(uniqueFailCategories);\r\n    }\r\n  }\r\n\r\n  //For all unique categories, checks if there are any photos w/ uploadStatus: notUploaded\r\n  //If all photos are uploaded for a category, change category upload status.  Else do nothing\r\n  checkCategoryUploadStatus = async (categoriesArray) => {\r\n    for(let i = 0; i<categoriesArray.length; i++){\r\n      try{\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${categoriesArray[i]}`;\r\n          })\r\n          .count();\r\n          //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n        if(localCatPhotosCount === 0){\r\n          //Update status\r\n          //console.log('success');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'success', this.props.pictureReq);\r\n        }\r\n        else{\r\n          //console.log('fail');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'fail', this.props.pictureReq);\r\n        }\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Set photo uploadStatus to 'uploaded'\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Get category uploadStatus\r\n  /*\r\n  getStatus = (imageId) => {\r\n    return this.props.categories[imageId].catUploadStatus;\r\n  }\r\n  */\r\n\r\n\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.getLocalPhotos()} className=\"ui button positive\">Upload</button>\r\n        <Link to={`${this.props.currentJob}/categories`} className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to={`${this.props.currentJob}/categories`}/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Upload local photos'\r\n          content='Upload all photos that have not been uploaded yet?'\r\n          path={`${this.props.currentJob}/categories`}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  const currentJob = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJob].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    currentJob: currentJob,\r\n    pictureReq: currentPictureReqs\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(UploadAll);\r\n\r\nexport default connect(mapStateToProps, { updateCatUploadStatus })(toastManager);\r\n","/*\r\nJobList - Menu that shows current saved job sessions\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\nimport { setCurrentJob, updateJobColor } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\n\r\nclass JobList extends React.Component{\r\n\r\n  state = { toCategories: false, toDelete: false, jobId: '' };\r\n\r\n  componentDidMount(){\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    try{\r\n      for(let i=0; i<this.props.sessionData.length; i++){\r\n        this.checkForPhotoCompletion(this.props.sessionData[i].id);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  checkForPhotoCompletion = async (jobId) => {\r\n    //loop through all existinh job tables and check for any 'norUploaded' photos\r\n    try{\r\n      const uploadedPhotosCount = await db.table(jobId)\r\n        .where('uploadStatus').equals('notUploaded').count();\r\n      const jobPhotosCount = await db.table(jobId).count();\r\n        //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n      if(uploadedPhotosCount === 0 & jobPhotosCount !== 0){\r\n        //all uploaded, go green\r\n        console.log('Green', jobId);\r\n        this.props.updateJobColor(jobId,`rgba(75, 225, 75, 0.2)`);\r\n      }\r\n      else if(uploadedPhotosCount !== 0){\r\n        //some remaining, go red\r\n        this.props.updateJobColor(jobId,`rgba(225, 75, 75, 0.2)`);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  onJobClick = async (jobId) => {\r\n    //console.log('This is job Id: ',jobId);\r\n    await this.props.setCurrentJob(jobId);\r\n    await this.setState({ toCategories: true, jobId: jobId });\r\n    //console.log('jobId: ',this.state.jobId);\r\n  }\r\n\r\n  onDeleteClick = async (jobId) => {\r\n    await this.props.setCurrentJob(jobId);\r\n    this.setState({ toDelete: true, jobId: jobId });\r\n  }\r\n\r\n  renderList(){\r\n    if(this.props.sessionData){\r\n      //console.log('joblist session data: ',this.props.sessionData);\r\n      return this.props.sessionData.map( job => {\r\n        return(\r\n          <div className='item' key={job.id} style={{\r\n            backgroundColor: `${job.color}` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <button className=\"ui negative button\" onClick={() => {this.onDeleteClick(job.id)}}>Delete</button>\r\n            </div>\r\n            <div onClick={() => {this.onJobClick(job.id)}}>\r\n              {job.projectName}\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to={'/delete'} />\r\n    }\r\n    try{\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <div className=\"item\" key='warning' style={{ visibility: this.props.sessionData.length === 10 ? 'visible' : 'hidden' }}>\r\n              Limit 10 jobs.  Delete jobs to make space.\r\n            </div>\r\n            <Link to='/newjob' className=\"item\" key='newJob' style={{ visibility: this.props.sessionData.length === 10 ? 'hidden' : 'visible' }}>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    catch (e){\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <Link to='/newjob' className=\"item\" key='newJob'>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  //Check if there are existing jobs.  If not, let joblist be blank\r\n  //_.compact removed undefined values from jobs\r\n  try{\r\n    return{\r\n      userName: state.userData,\r\n      sessionData: _.compact(Object.values(state.sessions.entities.jobs))\r\n    };\r\n  }\r\n  catch (e){\r\n    //console.log(e);\r\n    return{\r\n      userName: state.userData,\r\n    };\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setCurrentJob, updateJobColor })(JobList);\r\n","/*\r\nSignIn - First menu.  User inputs their username\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { setUsername } from '../../actions';\r\n\r\nimport InputForm from '../InputForm';\r\n\r\nconst userValidation = value => (value && value.length > 3 ? `You must enter a User Name (Max 3 characters)` : undefined)\r\n\r\nclass SignIn extends React.Component{\r\n\r\n  state = { toJobList: false };\r\n\r\n  componentDidMount(){\r\n    //if localStorage exists, redirect to /joblist\r\n    if(!localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\r\n      this.setState({ toJobList: true });\r\n    }\r\n    else if (!localStorage.getItem(\"state\").includes(`signIn`)){\r\n      //localStorage has old architecture, delete localStorage\r\n      localStorage.clear();\r\n    }\r\n  }\r\n\r\n  onSubmit = (formValues) => {\r\n    formValues.userName = formValues.userName.toUpperCase();\r\n    //console.log('Clicked: ',formValues);\r\n    this.props.setUsername(formValues.userName);\r\n    this.setState({ toJobList: true });\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toJobList){\r\n      return <Redirect to='/joblist' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1 style={{ textAlign: 'center' }}>SolarPix 2.0</h1>\r\n        <h4 style={{ textAlign: 'center' }}>Please Sign In with your Initials</h4>\r\n        <InputForm  initialValues={{ key: 'signIn' }} onSubmit={this.onSubmit} fields={\r\n          [\r\n            {\r\n            name: 'userName',\r\n            label: 'User Initials',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            }\r\n          ]\r\n        }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default connect(null, { setUsername })(SignIn);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { uploadAllPhotos, updateUploadStatus } from '../actions';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\nimport NetworkDetector from '../HOCs/NetworkDetector';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\nimport UploadAll from './pages/UploadAll';\r\nimport JobList from './pages/JobList';\r\nimport SignIn from './pages/SignIn';\r\n\r\n\r\n\r\nconst App = (props) => {\r\n\r\n  if(!props.isDisconnected && props.uploadStatus !== 'uploading'){\r\n    //console.log('You have no network connection', props);\r\n    props.updateUploadStatus('uploading');\r\n    props.uploadAllPhotos();\r\n  }\r\n  else if(props.isDisconnected && props.uploadStatus === 'uploading'){\r\n    props.updateUploadStatus('');\r\n  }\r\n\r\n//console.log('ayylmao');\r\n\r\n  return (\r\n    <ToastProvider>\r\n      <p>v{process.env.REACT_APP_VERSION}</p>\r\n      <div className=\"ui container\" >\r\n        <HashRouter>\r\n          <div>\r\n            <Route path=\"/newjob\" exact component={CreateJob}/>\r\n            <Route path=\"/:job/categories\" exact component={CategoryList}/>\r\n            <Route path=\"/:job/categories/:id\" exact component={CategoryEdit}/>\r\n            <Route path=\"/delete\" exact component={DeleteJob}/>\r\n            <Route path=\"/upload\" exact component={UploadAll}/>\r\n            <Route path=\"/joblist\" exact component={JobList}/>\r\n            <Route path=\"/\" exact component={SignIn}/>\r\n          </div>\r\n        </HashRouter>\r\n      </div>\r\n    </ToastProvider>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    uploadStatus: state.uploadStatus\r\n  }\r\n}\r\n\r\nconst networkDetector = NetworkDetector(App);\r\n\r\nexport default connect(mapStateToProps, { uploadAllPhotos, updateUploadStatus })(networkDetector);\r\n//export default App;\r\n","import { SET_CURRENTJOB, SET_JOBCOUNTER } from '../actions/types'\r\n\r\nconst initialState = {\r\n  currentJob: '',\r\n  jobCounter: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type){\r\n    case SET_CURRENTJOB:\r\n      return { ...state, currentJob: action.payload };\r\n\r\n    case SET_JOBCOUNTER:\r\n      const newCount = state.jobCounter + action.payload;\r\n      return { ...state, jobCounter: newCount };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport userReducer from './userReducer';\r\nimport jobReducer from './jobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport pageLocationReducer from './pageLocationReducer';\r\nimport currentJobReducer from './currentJobReducer';\r\nimport uploadStatusReducer from './uploadStatusReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  uploadStatus: uploadStatusReducer,\r\n  userData: userReducer,\r\n  jobMeta: currentJobReducer,\r\n  categoryData: categoriesReducer,\r\n  sessions: jobReducer,\r\n  form: formReducer,\r\n  pageLocation: pageLocationReducer\r\n})\r\n\r\n/*\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'DELETE_JOB'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n*/\r\n\r\n//export default rootReducer;\r\nexport default appReducer;\r\n","import { UPLOAD_ALLIMAGES_STATUS } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case UPLOAD_ALLIMAGES_STATUS:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_USERNAME } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SET_USERNAME:\r\n\r\n      //return { ...state, action.payload };\r\n\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    /*\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      return { ...state, [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        catUploadStatus: action.payload.status\r\n        }\r\n      };\r\n    */\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//import { CREATE_JOBLIST, ADD_JOB } from '../actions/types'\r\n//import _ from 'lodash'\r\nimport {\r\n  CREATE_JOBLIST,\r\n  ADD_JOB,\r\n  DELETE_JOB,\r\n  UPDATE_PHOTOQTY,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  UPDATE_JOBCOLOR\r\n } from '../actions/types'\r\n//import { normalize } from 'normalizr';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOBLIST:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n      //return { ...state };\r\n      //return { ...state, ..._.mapKeys(action.payload, 'id') }\r\n    case UPDATE_PHOTOQTY:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].photoQty = action.payload.photoQty;\r\n      return newState;\r\n\r\n    case DELETE_JOB:\r\n      //Do I even need to do this w/ lodash?\r\n      newState = { ...state };\r\n      /*\r\n      Doesn't work for some reason.  Supposed to completely remove from object\r\n      _.omit(newState.entities.jobs, action.payload.jobId);\r\n      _.omit(newState.entities.pictureReqs, action.payload.pictureReq);\r\n      */\r\n      newState.entities.jobs[action.payload.jobId] = undefined;\r\n      newState.entities.pictureReqs[action.payload.pictureReq] = undefined;\r\n      return newState;\r\n\r\n    case ADD_JOB:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId] = action.payload.jobData;\r\n      newState.entities.pictureReqs[action.payload.pictureReqId] = action.payload.pictureReqData;\r\n      return newState;\r\n\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].catUploadStatus = action.payload.status;\r\n      return newState;\r\n\r\n    case UPDATE_JOBCOLOR:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId].color = action.payload.color;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SAVE_PAGELOCATION\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SAVE_PAGELOCATION:\r\n      return { ...state, yValue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      //onupdatefound, listens for statechange event; fired if installing property acquires a new service worker\r\n      registration.onupdatefound = () => {\r\n        //installing, returns a service worker whose .state property is installing\r\n        const installingWorker = registration.installing;\r\n        //If there's no service worker, exit\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        //onstatechange, fired anytime .state property changes\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import Dexie from 'dexie';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    userData: store.getState().userData,\r\n    sessions: store.getState().sessions,\r\n    jobMeta: store.getState().jobMeta,\r\n    db: store.getState().db\r\n    //categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n\r\nserviceWorker.register();\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n\r\n\r\n//Paste this command into console to check localStorage size.\r\n/*\r\nvar _lsTotal=0,_xLen,_x;for(_x in localStorage){ if(!localStorage.hasOwnProperty(_x)){continue;} _xLen= ((localStorage[_x].length + _x.length)* 2);_lsTotal+=_xLen; console.log(_x.substr(0,50)+\" = \"+ (_xLen/1024).toFixed(2)+\" KB\")};console.log(\"Total = \" + (_lsTotal / 1024).toFixed(2) + \" KB\");\r\n*/\r\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.c5af7465.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.1ad94596.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_salessv.0ee0a268.bin\";"],"sourceRoot":""}